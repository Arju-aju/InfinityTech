const { body, validationResult } = require('express-validator');
const Coupon = require('../../models/coupounSchema');

const generateCouponCode = async () => {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    const codeLength = 8;
    let code = '';
    
    for (let i = 0; i < codeLength; i++) {
        code += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    
    const existingCoupon = await Coupon.findOne({ code });
    if (existingCoupon) {
        return generateCouponCode();
    }
    
    return code;
};

// Validation middleware
const validateCoupon = [
    body('name')
        .trim()
        .notEmpty().withMessage('Coupon name is required')
        .isLength({ min: 3, max: 50 }).withMessage('Coupon name must be between 3 and 50 characters')
        .custom(async (value, { req }) => {
            const exists = await Coupon.findOne({ 
                name: value, 
                _id: { $ne: req.params?.Id } 
            });
            if (exists) throw new Error('Coupon name already exists');
            return true;
        }),
    body('code')
        .trim()
        .notEmpty().withMessage('Coupon code is required')
        .isLength({ min: 6, max: 12 }).withMessage('Coupon code must be between 6 and 12 characters')
        .matches(/^[A-Z0-9]+$/).withMessage('Coupon code must contain only uppercase letters and numbers')
        .custom(async (value, { req }) => {
            const exists = await Coupon.findOne({ 
                code: value.toUpperCase(), 
                _id: { $ne: req.params?.Id } 
            });
            if (exists) throw new Error('Coupon code already exists');
            return true;
        }),
    body('offerType')
        .isIn(['percentage', 'flat']).withMessage('Invalid offer type'),
    body('offerValue')
        .isFloat({ min: 0.01 }).withMessage('Offer value must be a positive number')
        .custom((value, { req }) => {
            if (req.body.offerType === 'percentage' && (value > 100 || value <= 0)) {
                throw new Error('Percentage discount must be between 1 and 100');
            }
            return true;
        }),
    body('minimumPrice')
        .isFloat({ min: 0 }).withMessage('Minimum price must be a positive number'),
    body('expiredOn')
        .isISO8601().withMessage('Valid expiration date required')
        .custom((value) => {
            const expiryDate = new Date(value);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            if (expiryDate < today) throw new Error('Expiration date must be today or in the future');
            return true;
        }),
    body('usageLimit')
        .optional({ nullable: true })
        .isInt({ min: 1 }).withMessage('Usage limit must be a positive integer'),
    body('usagePerUserLimit')
        .isInt({ min: 1 }).withMessage('Usage per user limit must be at least 1'),
];

// Get all coupons
exports.getAllCoupon = async (req, res) => {
    try {
        const { search, status } = req.query;
        let query = {};

        if (search) {
            query.$or = [
                { name: { $regex: search, $options: 'i' } },
                { code: { $regex: search, $options: 'i' } }
            ];
        }

        if (status === 'active') query.isActive = true;
        if (status === 'inactive') query.isActive = false;

        const coupons = await Coupon.find(query).sort({ createdOn: -1 });

        res.render('admin/coupon', {
            path:req.path,
            coupons,
            success: req.flash('success'),
            error: req.flash('error'),
        });
    } catch (error) {
        console.error('Error in getAllCoupon:', error);
        req.flash('error', 'Failed to fetch coupons');
        res.redirect('/admin/dashboard');
    }
};

// Render create coupon form
exports.getCreateCouponForm = async (req, res) => {
    try {
        const autoGeneratedCode = await generateCouponCode();
        
        res.render('createCoupon', {
            oldValue: {
                ...req.session.formData,
                code: req.session.formData?.code || autoGeneratedCode
            },
            error_msg: req.flash('error'),
        });
        delete req.session.formData;
    } catch (error) {
        console.error('Error in getCreateCouponForm:', error);
        req.flash('error', 'Failed to load create coupon form');
        res.redirect('/admin/coupons');
    }
};

// Create coupon
exports.postCreateCoupon = [
    validateCoupon,
    async (req, res) => {
        try {
            const errors = validationResult(req);
            if (!errors.isEmpty()) {
                req.session.formData = req.body;
                req.flash('error', errors.array().map(err => err.msg));
                return res.redirect('/admin/add-coupon');
            }

            const {
                name,
                code = await generateCouponCode(),
                offerType,
                offerValue,
                minimumPrice,
                expiredOn,
                usageLimit,
                usagePerUserLimit,
                isActive
            } = req.body;

            const newCoupon = new Coupon({
                name,
                code: code.toUpperCase(),
                offerType,
                offerValue: parseFloat(offerValue),
                minimumPrice: parseFloat(minimumPrice),
                createdOn: new Date(),
                expiredOn: new Date(expiredOn),
                isActive: isActive === 'on' || isActive === true,
                usageLimit: usageLimit ? parseInt(usageLimit) : null,
                usagePerUserLimit: parseInt(usagePerUserLimit) || 1,
            });

            await newCoupon.save();
            req.flash('success', 'Coupon created successfully!');
            res.redirect('/admin/coupons');
        } catch (error) {
            console.error('Error in postCreateCoupon:', error);
            req.flash('error', 'Failed to create coupon');
            res.redirect('/admin/add-coupon');
        }
    }
];

// Render edit coupon form
exports.getEditCouponForm = async (req, res) => {
    try {
        const coupon = await Coupon.findById(req.params.Id);
        if (!coupon) {
            req.flash('error', 'Coupon not found');
            return res.redirect('/admin/coupons');
        }

        // Format date for input
        coupon.expiredOn = coupon.expiredOn.toISOString().split('T')[0];

        res.render('editCoupon', {
            Id: req.params.Id,
            coupon,
            oldValue: req.session.formData || {},
            error_msg: req.flash('error'),
            success_msg: req.flash('success')
        });
        delete req.session.formData;
    } catch (error) {
        console.error('Error in getEditCouponForm:', error);
        req.flash('error', 'Failed to load coupon data');
        res.redirect('/admin/coupons');
    }
};

// Update coupon
exports.updateCoupon = [
    validateCoupon,
    async (req, res) => {
        try {
            const errors = validationResult(req);
            const coupon = await Coupon.findById(req.params.Id);

            if (!coupon) {
                req.flash('error', 'Coupon not found');
                return res.redirect('/admin/coupons');
            }

            if (!errors.isEmpty()) {
                req.session.formData = req.body;
                req.flash('error', errors.array().map(err => err.msg));
                return res.render('editCoupon', {
                    Id: req.params.Id,
                    coupon,
                    oldValue: req.body,
                    error_msg: req.flash('error'),
                    success_msg: ''
                });
            }

            const {
                name,
                code,
                offerType,
                offerValue,
                minimumPrice,
                expiredOn,
                usageLimit,
                usagePerUserLimit,
                isActive
            } = req.body;

            const updatedFields = {
                name,
                code: code.toUpperCase(),
                offerType,
                offerValue: parseFloat(offerValue),
                minimumPrice: parseFloat(minimumPrice),
                expiredOn: new Date(expiredOn),
                isActive: isActive === 'on' || isActive === true,
                usageLimit: usageLimit ? parseInt(usageLimit) : null,
                usagePerUserLimit: parseInt(usagePerUserLimit) || 1
            };

            const updatedCoupon = await Coupon.findByIdAndUpdate(
                req.params.Id,
                updatedFields,
                { new: true, runValidators: true }
            );

            if (!updatedCoupon) {
                req.flash('error', 'Failed to update coupon');
                return res.redirect('/admin/coupons');
            }

            req.flash('success', 'Coupon updated successfully!');
            res.redirect('/admin/coupons');

        } catch (error) {
            console.error('Error in updateCoupon:', error);
            req.flash('error', 'An unexpected error occurred while updating the coupon');
            res.redirect(`/admin/editCoupon/${req.params.Id}`);
        }
    }
];

// Delete coupon
exports.deleteCoupon = async (req, res) => {
    try {
        const couponId = req.params.Id;
        const coupon = await Coupon.findById(couponId);

        if (!coupon) {
            req.flash('error', 'Coupon not found');
            return res.redirect('/admin/coupons');
        }

        if (coupon.couponUsed > 0) {
            req.flash('error', 'Cannot delete coupon that has been used');
            return res.redirect('/admin/coupons');
        }

        await Coupon.findByIdAndDelete(couponId);
        req.flash('success', 'Coupon deleted successfully');
        res.redirect('/admin/coupons');

    } catch (error) {
        console.error('Error in deleteCoupon:', error);
        req.flash('error', 'An unexpected error occurred while deleting the coupon');
        res.redirect('/admin/coupons');
    }
};

module.exports = exports;