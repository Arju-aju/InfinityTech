</main>
<footer class="w-full bg-gray-900 text-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-12">
            <div class="space-y-6">
                <div class="flex items-center space-x-3">
                    <span class="text-2xl font-bold tracking-tight">InfinityTech</span>
                </div>
                <p class="text-sm text-gray-300 leading-relaxed">Your trusted destination for premium laptops and tech accessories.</p>
            </div>
            <div>
                <h3 class="text-lg font-semibold mb-6 text-yellow-400">Quick Links</h3>
                <ul class="space-y-3">
                    <li><a href="/shop" class="text-sm text-gray-300 hover:text-yellow-400 transition-colors">Shop</a></li>
                    <li><a href="/about" class="text-sm text-gray-300 hover:text-yellow-400 transition-colors">About Us</a></li>
                    <li><a href="/contact" class="text-sm text-gray-300 hover:text-yellow-400 transition-colors">Contact</a></li>
                    <li><a href="/privacy-policy" class="text-sm text-gray-300 hover:text-yellow-400 transition-colors">Privacy Policy</a></li>
                </ul>
            </div>
            <div>
                <h3 class="text-lg font-semibold mb-6 text-yellow-400">Customer Service</h3>
                <ul class="space-y-3">
                    <li><a href="/shipping" class="text-sm text-gray-300 hover:text-yellow-400 transition-colors">Shipping Info</a></li>
                    <li><a href="/returns" class="text-sm text-gray-300 hover:text-yellow-400 transition-colors">Returns</a></li>
                    <li><a href="/faq" class="text-sm text-gray-300 hover:text-yellow-400 transition-colors">FAQ</a></li>
                    <li><a href="/warranty" class="text-sm text-gray-300 hover:text-yellow-400 transition-colors">Warranty</a></li>
                </ul>
            </div>
            <div>
                <h3 class="text-lg font-semibold mb-6 text-yellow-400">Contact Us</h3>
                <ul class="space-y-4">
                    <li class="text-sm text-gray-300"><span class="block">Email:</span><a href="mailto:support@infinitytech.com" class="hover:text-yellow-400">support@infinitytech.com</a></li>
                    <li class="text-sm text-gray-300"><span class="block">Phone:</span><a href="tel:+1234567890" class="hover:text-yellow-400">+1 (234) 567-890</a></li>
                    <li class="text-sm text-gray-300"><span class="block">Address:</span>123 Tech Street, Silicon Valley, CA 94025</li>
                </ul>
            </div>
        </div>
        <div class="mt-12 pt-8 border-t border-gray-800">
            <div class="flex flex-col md:flex-row justify-between items-center space-y-6 md:space-y-0">
                <p class="text-sm text-gray-400">Â© 2025 InfinityTech. All rights reserved.</p>
                <div class="flex space-x-6">
                    <a href="#" class="text-gray-300 hover:text-yellow-400 transition-colors">
                        <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24"><path fill-rule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" clip-rule="evenodd" /></svg>
                    </a>
                    <a href="#" class="text-gray-300 hover:text-yellow-400 transition-colors">
                        <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24"><path fill-rule="evenodd" d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z" clip-rule="evenodd" /></svg>
                    </a>
                    <a href="#" class="text-gray-300 hover:text-yellow-400 transition-colors">
                        <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" /></svg>
                    </a>
                </div>
            </div>
        </div>
    </div>
</footer>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Notification helper function
    function showNotification(message, type = 'info') {
        Swal.fire({
            text: message,
            icon: type,
            toast: true,
            position: 'bottom-end',
            timer: 3000,
            timerProgressBar: true,
            showConfirmButton: false,
            background: type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#007bff',
            color: '#fff',
        });
    }

    // Add to Cart function
    function addToCart(productId) {
        if (!productId) return showNotification('Product ID missing', 'error');
        showNotification('Adding to cart...', 'info');
        fetch('/api/cart/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId, quantity: 1 }),
            credentials: 'same-origin'
        })
        .then(response => {
            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
            return response.json();
        })
        .then(data => {
            if (data.success) {
                showNotification('Product added to cart!', 'success');
                document.dispatchEvent(new Event('cartUpdated'));
            } else {
                showNotification(data.message || 'Failed to add to cart', 'error');
            }
        })
        .catch(error => {
            console.error('Add to Cart error:', error);
            showNotification('Error adding to cart', 'error');
        });
    }

    // Buy Now function
    function buyNow(productId) {
        if (!productId) return showNotification('Product ID missing', 'error');
        showNotification('Processing...', 'info');
        fetch('/api/cart/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId, quantity: 1, buyNow: true }),
            credentials: 'same-origin'
        })
        .then(response => {
            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
            return response.json();
        })
        .then(data => {
            if (data.success) {
                window.location.href = '/checkout?source=buy_now';
            } else {
                showNotification(data.message || 'Failed to process', 'error');
            }
        })
        .catch(error => {
            console.error('Buy Now error:', error);
            showNotification('Error processing purchase', 'error');
        });
    }

    // Toggle Wishlist function
    function toggleWishlist(event, productId) {
        event.preventDefault();
        if (!productId) return showNotification('Product ID missing', 'error');
        const wishlistBtn = event.currentTarget;
        const wishlistIcon = wishlistBtn.querySelector('svg');
        const isAdding = !wishlistIcon.classList.contains('text-red-500');
        showNotification(isAdding ? 'Adding to wishlist...' : 'Removing from wishlist...', 'info');

        fetch('/api/wishlist/toggle', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId }),
            credentials: 'same-origin'
        })
        .then(response => {
            if (!response.ok) {
                if (response.status === 401) {
                    showNotification('Please log in to modify wishlist', 'error');
                    return { success: false };
                }
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                wishlistIcon.classList.toggle('text-red-500');
                wishlistIcon.classList.toggle('text-gray-600');
                showNotification(data.added ? 'Added to wishlist!' : 'Removed from wishlist', 'success');
                document.dispatchEvent(new Event('wishlistUpdated'));
            } else {
                showNotification(data.message || 'Error updating wishlist', 'error');
            }
        })
        .catch(error => {
            console.error('Wishlist error:', error);
            showNotification('Error updating wishlist', 'error');
        });
    }

    // Initialize event listeners and wishlist state
    document.addEventListener('DOMContentLoaded', () => {
        // Add to Cart buttons
        document.querySelectorAll('.add-to-cart-btn').forEach(button => {
            button.addEventListener('click', () => {
                const productId = button.getAttribute('data-product-id');
                addToCart(productId);
            });
        });

        // Buy Now buttons
        document.querySelectorAll('.buy-now-btn').forEach(button => {
            button.addEventListener('click', () => {
                const productId = button.getAttribute('data-product-id');
                buyNow(productId);
            });
        });

        // Wishlist buttons
        document.querySelectorAll('.wishlist-btn').forEach(button => {
            button.addEventListener('click', (event) => {
                const productId = button.getAttribute('data-product-id');
                toggleWishlist(event, productId);
            });
        });

        // Fetch and update wishlist state
        fetch('/api/user/wishlist/products', { credentials: 'same-origin' })
            .then(response => {
                if (!response.ok && response.status !== 401) throw new Error(`HTTP error! Status: ${response.status}`);
                return response.status === 401 ? null : response.json();
            })
            .then(data => {
                if (data && data.wishlistItems) {
                    data.wishlistItems.forEach(itemId => {
                        const btn = document.querySelector(`.wishlist-btn[data-product-id="${itemId}"]`);
                        if (btn) {
                            const icon = btn.querySelector('svg');
                            icon.classList.remove('text-gray-600');
                            icon.classList.add('text-red-500');
                        }
                    });
                }
            })
            .catch(error => console.error('Error fetching wishlist:', error));
    });
    
async function updateQuantity(productId, action) {
    try {
      const quantityElement = document.querySelector(`[data-quantity="${productId}"]`);
      const stockElement = document.querySelector(`[data-stock="${productId}"]`);
      const currentQuantity = parseInt(quantityElement.textContent);
      const currentStock = parseInt(stockElement.textContent);
      const newQuantity = action === 'increase' ? currentQuantity + 1 : currentQuantity - 1;

      if (newQuantity < 1) {
        return removeFromCart(productId);
      }

      if (currentStock < 10 && action === 'increase') {
        showNotification('Stock is low, cannot increase quantity!', 'error');
        return;
      }

      const response = await fetch(`/cart/update/${productId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ quantity: action === 'increase' ? 1 : -1 })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Failed to update quantity');
      }

      // Update UI
      quantityElement.textContent = data.newQuantity;
      stockElement.textContent = data.remainingStock;
      const itemElement = document.querySelector(`[data-product-id="${productId}"]`);
      const itemTotalElement = itemElement.querySelector('.item-total');
      itemTotalElement.textContent = `â¹${data.itemTotal}`;

      const subtotalElement = document.querySelector('.cart-subtotal');
      const shippingElement = document.querySelector('.cart-shipping');
      const totalElement = document.querySelector('.cart-total');
      subtotalElement.textContent = `â¹${data.cartSubtotal}`;
      shippingElement.textContent = `â¹${data.shippingCharge}`;
      totalElement.textContent = `â¹${data.cartTotal}`;

      // Disable buttons if stock < 10
      const increaseBtn = itemElement.querySelector('.increase-btn');
      const decreaseBtn = itemElement.querySelector('.decrease-btn');
      if (data.remainingStock < 10) {
        increaseBtn.disabled = true;
        increaseBtn.classList.add('opacity-50', 'cursor-not-allowed');
      } else {
        increaseBtn.disabled = false;
        increaseBtn.classList.remove('opacity-50', 'cursor-not-allowed');
      }
      decreaseBtn.disabled = data.newQuantity === 1;

      showNotification('Quantity updated successfully!', 'success');
    } catch (error) {
      console.error('Error updating quantity:', error);
      showNotification(error.message || 'An error occurred while updating quantity', 'error');
    }
  }

  async function removeFromCart(productId) {
    try {
      const result = await Swal.fire({
        title: 'Remove Item?',
        text: 'Are you sure you want to remove this item?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#1f2937',
        cancelButtonColor: '#dc3545',
        confirmButtonText: 'Yes, remove it!'
      });

      if (result.isConfirmed) {
        const response = await fetch(`/cart/remove/${productId}`, {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' }
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.message || 'Failed to remove item');
        }

        // Animate and remove item
        const itemElement = document.querySelector(`[data-product-id="${productId}"]`);
        itemElement.style.transition = 'opacity 0.3s ease';
        itemElement.style.opacity = '0';
        setTimeout(() => itemElement.remove(), 300);

        // Update totals
        const subtotalElement = document.querySelector('.cart-subtotal');
        const shippingElement = document.querySelector('.cart-shipping');
        const totalElement = document.querySelector('.cart-total');
        subtotalElement.textContent = `â¹${data.cartSubtotal}`;
        shippingElement.textContent = `â¹${data.shippingCharge}`;
        totalElement.textContent = `â¹${data.cartTotal}`;

        showNotification('Item removed successfully!', 'success');
        if (data.isEmpty) setTimeout(() => location.reload(), 1000);
      }
    } catch (error) {
      console.error('Error removing item:', error);
      showNotification(error.message || 'An error occurred while removing the item', 'error');
    }
  }

  function showNotification(message, type) {
    Swal.fire({
      text: message,
      icon: type,
      toast: true,
      position: 'top-end',
      timer: 3000,
      timerProgressBar: true,
      showConfirmButton: false,
      background: type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#007bff',
      color: '#fff'
    });
  }

  // Add event listeners after DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.cart-item').forEach((item, index) => {
      setTimeout(() => item.classList.add('slide-up'), index * 100);
    });

    document.querySelectorAll('.increase-btn').forEach(button => {
      button.addEventListener('click', () => {
        const productId = button.getAttribute('data-product-id');
        updateQuantity(productId, 'increase');
      });
    });

    document.querySelectorAll('.decrease-btn').forEach(button => {
      button.addEventListener('click', () => {
        const productId = button.getAttribute('data-product-id');
        updateQuantity(productId, 'decrease');
      });
    });

    document.querySelectorAll('.remove-btn').forEach(button => {
      button.addEventListener('click', () => {
        const productId = button.getAttribute('data-product-id');
        removeFromCart(productId);
      });
    });
  });

</script>
</body>
</html>