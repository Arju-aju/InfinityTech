<!DOCTYPE html>
<html lang="en" class="dark">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>InfinityTech Admin - Return Requests Management</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

  <style>
    :root {
      --sidebar-width: 16rem;
      --primary-bg: #1e1e2f; /* Dark blue-gray */
      --secondary-bg: #2a2438; /* Deep purple-gray */
      --content-bg: #2d2d44; /* Lighter dark blue for content */
      --accent-start: #d4af37; /* Rich Gold */
      --accent-end: #f9e076;   /* Light Yellow */
      --text-color: #e5e7eb; /* Light gray for text */
    }

    /* Gradient Background */
    .gradient-bg {
      @apply bg-gradient-to-br from-[var(--primary-bg)] to-[var(--secondary-bg)] !important;
    }

    /* Glass Effect */
    .glass-effect-dark {
      @apply bg-[var(--content-bg)]/80 backdrop-blur-md border border-white/10;
    }

    /* Golden Yellow Gradient for Buttons */
    .golden-button {
      @apply bg-gradient-to-r from-[var(--accent-start)] to-[var(--accent-end)] text-white px-4 py-2 rounded-lg shadow-lg hover:scale-105 transition-all duration-300;
    }

    /* Typography and Base Styles */
    body {
      @apply font-sans text-[var(--text-color)] min-h-screen m-0 p-0 bg-[var(--primary-bg)] !important;
    }

    /* Custom Animations */
    @keyframes gradientAnimation {
      0% { background-position: 0% 0%; }
      50% { background-position: 100% 100%; }
      100% { background-position: 0% 0%; }
    }
    .animate-gradient {
      background-size: 200% 200%;
      animation: gradientAnimation 15s ease infinite;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .card {
      transition: all 0.3s ease;
      animation: fadeIn 0.5s ease-out forwards;
    }

    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 24px rgba(212, 175, 55, 0.2);
    }

    .priority-indicator {
      width: 4px;
      height: 100%;
      position: absolute;
      left: 0;
      top: 0;
      transition: all 0.3s ease;
    }

    .status-pill {
      transition: all 0.3s ease;
    }

    .status-pill:hover {
      transform: scale(1.05);
    }

    .action-button {
      transition: all 0.2s ease;
    }

    .action-button:hover {
      transform: scale(1.1);
    }

    /* Sidebar Styling */
    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      width: var(--sidebar-width);
      z-index: 100;
      animation: slideIn 0.5s ease-out forwards;
    }
    @keyframes slideIn {
      from { transform: translateX(-100%); }
      to { transform: translateX(0); }
    }
  </style>
</head>

<body class="gradient-bg animate-gradient" style="background: linear-gradient(to bottom right, #1e1e2f, #2a2438) !important;">
  <!-- Sidebar -->
  <div class="sidebar fixed top-0 left-0 h-full w-64 md:w-[var(--sidebar-width)] bg-[var(--primary-bg)] z-50 transition-transform duration-300 md:translate-x-0 -translate-x-full shadow-lg">
    <div class="flex flex-col h-full text-[var(--text-color)]">
      <div class="flex items-center justify-start p-6 border-b border-white/10">
        <span class="text-2xl font-extrabold golden-button bg-clip-text text-transparent">InfinityTech</span>
      </div>
      
      <nav class="flex-1 space-y-2 p-4 overflow-y-auto">
        <% const navItems = [
          { href: '/admin/dashboard', icon: 'fa-home', label: 'Dashboard', active: (typeof path !== 'undefined' && path === '/admin/dashboard') },
          { href: '/admin/products', icon: 'fa-box', label: 'Products', active: (typeof path !== 'undefined' && path.includes('/admin/product')) },
          { href: '/admin/categories', icon: 'fa-tags', label: 'Categories', active: (typeof path !== 'undefined' && path.includes('/admin/categor')) },
          { href: '/admin/users', icon: 'fa-users', label: 'Customers', active: (typeof path !== 'undefined' && path === '/admin/users') },
          { href: '/admin/orders', icon: 'fa-shopping-bag', label: 'Orders', active: (typeof path !== 'undefined' && path === '/admin/orders') },
          { href: '/admin/return/requests', icon: 'fa-undo', label: 'Return Orders', active: (typeof path !== 'undefined' && path === '/admin/return/requests') },
          { href: '/admin/offers', icon: 'fa-percentage', label: 'Offer', active: (typeof path !== 'undefined' && path === '/admin/offers') },
          { href: '/admin/coupons', icon: 'fa-ticket-alt', label: 'Coupon', active: (typeof path !== 'undefined' && path === '/admin/coupons') },
          { href: '/admin/logout', icon: 'fa-sign-out-alt', label: 'Logout', active: (typeof path !== 'undefined' && path === '/admin/logout') }
        ]; %>
        <% navItems.forEach(item => { %>
          <a href="<%= item.href %>" class="flex items-center py-2.5 px-4 rounded transition duration-300 group <%= item.active ? 'golden-button text-white scale-105' : 'text-[var(--text-color)] hover:bg-[var(--secondary-bg)] hover:text-white hover:scale-105' %>">
            <i class="fas <%= item.icon %> w-6 transition-transform duration-300 group-hover:rotate-12"></i>
            <span class="ml-3"><%= item.label %></span>
          </a>
        <% }); %>
      </nav>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="flex-1 ml-[var(--sidebar-width)] p-8">
    <!-- Header Section -->
    <div class="mb-8">
      <h1 class="text-4xl font-extrabold bg-gradient-to-r from-[#d4af37] to-[#f9e076] bg-clip-text text-transparent tracking-tight t">Return Requests Management</h1>
    </div>

    <!-- Search and Filter Section -->
    <div class="mb-8 glass-effect-dark p-6 rounded-xl shadow-lg">
      <div class="flex flex-wrap gap-4">
        <div class="flex-1">
          <div class="relative">
            <input type="text" placeholder="Search requests..." 
                   class="w-full bg-[var(--content-bg)] text-[var(--text-color)] px-4 py-3 rounded-lg pl-12 focus:ring-2 focus:ring-[var(--accent-start)] focus:outline-none border border-white/10">
            <i class="fas fa-search absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
          </div>
        </div>
        <select class="bg-[var(--content-bg)] text-[var(--text-color)] px-4 py-3 rounded-lg focus:ring-2 focus:ring-[var(--accent-start)] focus:outline-none border border-white/10">
          <option>All Status</option>
          <option>Pending</option>
          <option>Approved</option>
          <option>Rejected</option>
        </select>
      </div>
    </div>

    <!-- Cards Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <% returnRequests.forEach((request, index) => { %>
        <div class="card glass-effect-dark rounded-xl overflow-hidden relative" style="animation-delay: <%= index * 100 %>ms">
          <div class="priority-indicator bg-[var(--accent-start)]"></div>
          <div class="p-6 pl-8">
            <!-- Header -->
            <div class="flex justify-between items-start mb-4">
              <div>
                <h3 class="text-lg font-semibold text-[var(--text-color)]">Request ID: <%= request._id.toString().substring(0, 8) %></h3>
                <p class="text-sm text-gray-400">Order ID: <%= request.orderId.toString().substring(0, 8) %></p>
              </div>
              <span class="status-pill px-3 py-1 rounded-full text-sm font-medium
                <%= request.returnStatus === 'Pending' ? 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/20' :
                    request.returnStatus === 'Approved' ? 'bg-green-500/20 text-green-400 border border-green-500/20' :
                    'bg-red-500/20 text-red-400 border border-red-500/20' %>">
                <%= request.returnStatus %>
              </span>
            </div>

            <!-- Reason -->
            <div class="mb-4">
              <h4 class="text-sm text-gray-400 mb-1">Reason</h4>
              <p class="text-[var(--text-color)] text-sm"><%= request.reason %></p>
            </div>

            <!-- Comments -->
            <div class="mb-4">
              <h4 class="text-sm text-gray-400 mb-1">Comments</h4>
              <p class="text-[var(--text-color)] text-sm"><%= request.comments %></p>
            </div>

            <!-- Products -->
            <div class="mb-4">
              <h4 class="text-sm text-gray-400 mb-1">Products</h4>
              <ul class="text-[var(--text-color)] text-sm space-y-3">
                <% request.items.forEach(item => { %>
                  <li class="flex justify-between items-center p-3 <%= item.valid ? 'bg-[var(--secondary-bg)]' : 'bg-red-900/20' %> rounded-lg">
                    <div class="flex items-center space-x-4">
                      <div class="flex-shrink-0">
                        <img src="<%= item.productDetails.image %>" 
                             alt="<%= item.productDetails.name %>" 
                             class="w-16 h-16 object-cover rounded-lg border border-white/10" 
                             onerror="this.src='/images/placeholder-product.jpg'">
                      </div>
                      <div class="flex flex-col">
                        <strong class="<%= item.valid ? 'text-[var(--accent-start)]' : 'text-red-400' %> text-base">
                          <%= item.productDetails.name %>
                        </strong>
                        <div class="flex items-center mt-1">
                          <span class="text-gray-400">Quantity:</span>
                          <span class="ml-2"><%= item.quantity %></span>
                        </div>
                      </div>
                    </div>
                    <div class="text-right">
                      <span class="text-[var(--text-color)] font-medium">
                        <%= formatPrice(item.productDetails.price) %>
                      </span>
                    </div>
                  </li>
                <% }) %>
              </ul>
            </div>

            <!-- Actions -->
            <div class="flex gap-3 mt-6">
              <a href="/admin/return/order-details/<%= request._id %>" 
                 class="action-button flex-1 golden-button text-center">
                <i class="fas fa-eye mr-2"></i>View Details
              </a>
              <% if (request.returnStatus === 'Pending') { %>
                <form action="/admin/return/approve/<%= request._id %>" method="POST" class="inline">
                  <button class="action-button w-12 h-12 bg-green-600 hover:bg-green-700 text-white rounded-lg flex items-center justify-center">
                    <i class="fas fa-check"></i>
                  </button>
                </form>
                <form action="/admin/return/reject/<%= request._id %>" method="POST" class="inline">
                  <button class="action-button w-12 h-12 bg-red-600 hover:bg-red-700 text-white rounded-lg flex items-center justify-center">
                    <i class="fas fa-times"></i>
                  </button>
                </form>
              <% } %>
            </div>
          </div>
        </div>
      <% }) %>
    </div>

    <!-- Empty State -->
    <% if (!returnRequests || returnRequests.length === 0) { %>
      <div class="text-center py-16 glass-effect-dark rounded-xl">
        <i class="fas fa-inbox text-6xl text-gray-400 mb-4"></i>
        <h3 class="text-xl text-[var(--text-color)] mb-2">No return requests found</h3>
        <p class="text-gray-500">Try adjusting your search or filter criteria</p>
      </div>
    <% } %>
  </div>

  <!-- JavaScript -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Sidebar Toggle for Mobile
      const sidebar = document.querySelector('.sidebar');
      const sidebarToggle = document.getElementById('sidebarToggle');
      if (sidebarToggle) {
        sidebarToggle.addEventListener('click', () => sidebar.classList.toggle('-translate-x-full'));
      }

      // Close sidebar on outside click (mobile)
      document.addEventListener('click', (e) => {
        if (window.innerWidth < 768 && !sidebar.contains(e.target) && !sidebarToggle?.contains(e.target)) {
          sidebar.classList.add('-translate-x-full');
        }
      });

      // Adjust Sidebar Height
      const main = document.querySelector('.flex-1');
      const updateHeight = () => {
        const mainHeight = main.offsetHeight;
        sidebar.style.height = `${Math.max(mainHeight, window.innerHeight)}px`;
      };
      updateHeight();
      window.addEventListener('resize', updateHeight);

      // Hover effect for cards
      document.querySelectorAll('.card').forEach(card => {
        card.addEventListener('mouseenter', () => {
          const indicator = card.querySelector('.priority-indicator');
          indicator.style.width = '6px';
        });
        card.addEventListener('mouseleave', () => {
          const indicator = card.querySelector('.priority-indicator');
          indicator.style.width = '4px';
        });
      });

      // Loading animation and confirmation for action buttons
      document.querySelectorAll('.action-button').forEach(button => {
        button.dataset.originalHTML = button.innerHTML;
        button.addEventListener('click', async function(e) {
          if (this.tagName === 'A') return;

          e.preventDefault();
          const form = this.closest('form');
          const action = this.querySelector('i').classList.contains('fa-check') ? 'approve' : 'reject';

          const result = await Swal.fire({
            title: `Are you sure you want to ${action} this return request?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d4af37',
            cancelButtonColor: '#ef4444',
            confirmButtonText: `Yes, ${action} it!`,
            background: '#1e1e2f',
            color: '#e5e7eb'
          });

          if (result.isConfirmed) {
            this.classList.add('opacity-75');
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            try {
              const response = await fetch(form.action, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
              });
              if (response.ok) {
                Swal.fire({
                  title: 'Success!',
                  text: `Return request has been ${action}d.`,
                  icon: 'success',
                  background: '#1e1e2f',
                  color: '#e5e7eb',
                  confirmButtonColor: '#d4af37',
                  timer: 1500
                }).then(() => {
                  window.location.reload();
                });
              } else {
                throw new Error('Failed to process request');
              }
            } catch (error) {
              console.error('Error:', error);
              this.classList.remove('opacity-75');
              this.innerHTML = this.dataset.originalHTML;
              Swal.fire({
                title: 'Error!',
                text: 'An error occurred while processing the request.',
                icon: 'error',
                background: '#1e1e2f',
                color: '#e5e7eb',
                confirmButtonColor: '#d4af37'
              });
            }
          }
        });
      });
    });
  </script>
</body>
</html>