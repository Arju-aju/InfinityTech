<%- include('./partials/adminHeader.ejs') %>

<style>
    /* Override conflicting styles */
    .products-container {
        display: block !important;
    }
    .product-grid {
        display: none !important;
    }
    .pagination-container {
        @apply mt-8 flex flex-col sm:flex-row items-center justify-between gap-4;
    }
    .pagination-button {
        @apply relative inline-flex items-center px-3 py-2 glass-effect text-sm text-gray-200 hover:bg-gray-700/50 transition-all duration-300;
    }
    .pagination-button.active {
        @apply bg-cyan-500/20 text-cyan-400;
    }
    .flash-message {
        @apply px-4 py-2 rounded-lg mt-4 text-center glass-effect;
    }
    .flash-success {
        @apply bg-green-500/20 text-green-400;
    }
    .flash-error {
        @apply bg-red-500/20 text-red-400;
    }
    tr:hover {
        @apply bg-gray-800/30; /* Adjusted for dark theme */
    }
    /* Main content styling */
    main {
        margin-left: var(--sidebar-width, 16rem);
        width: calc(100% - var(--sidebar-width, 16rem));
        min-height: 100vh; /* Ensure main spans full viewport height */
    }
    /* Sidebar styling */
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        width: var(--sidebar-width, 16rem);
        z-index: 100;
        animation: slideIn 0.5s ease-out forwards; /* Slide-in animation */
    }
    @keyframes slideIn {
        from { transform: translateX(-100%); }
        to { transform: translateX(0); }
    }
</style>

<div class="flex min-h-screen bg-gray-900">
    <%- include('./partials/adminSidebar.ejs') %>

    <main class="flex-1 p-6">
        <div class="bg-gray-900 p-6 rounded-xl shadow-lg">
            <h1 class="text-4xl font-extrabold mb-6 text-center">Orders Management</h1>
            
            <form id="filterForm" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 bg-gray-800 p-4 rounded-lg shadow">
                <input type="text" name="search" placeholder="Search by Order ID or Customer"
                    value="<%= filters?.search || '' %>"
                    class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                
                <select name="status" class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                    <option value="All">All Status</option>
                    <option value="Pending" <%= filters?.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                    <option value="Processing" <%= filters?.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                    <option value="Shipped" <%= filters?.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                    <option value="Delivered" <%= filters?.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                    <option value="Cancelled" <%= filters?.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                </select>
                
                <div class="flex space-x-2">
                    <input type="date" name="startDate" value="<%= filters?.startDate || '' %>"
                        class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                    <input type="date" name="endDate" value="<%= filters?.endDate || '' %>"
                        class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                </div>
                
                <div class="flex space-x-2">
                    <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg">Apply Filters</button>
                    <button type="button" onclick="resetFilters()" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg">Reset</button>
                </div>
            </form>
            
            <div class="overflow-x-auto mt-6">
                <table class="w-full table-auto border-collapse bg-gray-800 text-white rounded-lg">
                    <thead class="bg-gray-700">
                        <tr>
                            <th class="px-6 py-4">Order ID</th>
                            <th class="px-6 py-4">Customer</th>
                            <th class="px-6 py-4">Total Amount</th>
                            <th class="px-6 py-4">Status</th>
                            <th class="px-6 py-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (orders.length > 0) { %>
                            <% orders.forEach(order => { %>
                                <tr class="hover:bg-gray-700 transition">
                                    <td class="px-6 py-4"><%= order._id %></td>
                                    <td class="px-6 py-4"><%= order.user.name %></td>
                                    <td class="px-6 py-4">â‚¹<%= order.orderAmount.toFixed(2) %></td>
                                    <td class="px-6 py-4">
                                        <% if (order.status === 'Cancelled') { %>
                                            <span class="px-3 py-1 bg-red-500 text-white rounded-lg">Cancelled</span>
                                        <% } else { %>
                                            <select class="bg-gray-700 text-white rounded-lg py-1 px-2 focus:ring-2 focus:ring-blue-500"
                                            data-order-id="<%= order._id %>" onchange="updateStatus(this)">
                                                <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                                <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                                <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                                <option value="Out for Delivery" <%= order.status === 'Out for Delivery' ? 'selected' : '' %>>Out for Delivery</option>
                                                <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                                <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                            </select>
                                        <% } %>
                                    </td>
                                    <td class="px-6 py-4">
                                        <a href="/admin/viewdetails/<%= order._id %>" class="text-blue-400 hover:text-blue-300 transition">
                                            <i class="fas fa-eye"></i> View Details
                                        </a>
                                    </td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr>
                                <td colspan="5" class="px-6 py-8 text-center text-gray-400">No orders found.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>

                <div class="text-center text-gray-400 mb-4">
                    Showing page <%= pagination.currentPage %> of <%= pagination.totalPages %>
                </div>

                <div class="mt-6 flex justify-center items-center space-x-4">
                    <% if (pagination.hasPrevPage) { %>
                        <a href="?<%= new URLSearchParams({...filters, page: pagination.currentPage - 1}).toString() %>"
                           class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition">
                            Previous
                        </a>
                    <% } %>
                
                    <div class="flex items-center space-x-2">
                        <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                            <a href="?<%= new URLSearchParams({...filters, page: i}).toString() %>"
                               class="px-4 py-2 rounded-lg transition <%= pagination.currentPage === i ? 'bg-blue-600' : 'bg-gray-700 hover:bg-gray-600' %>">
                                <%= i %>
                            </a>
                        <% } %>
                    </div>
                
                    <% if (pagination.hasNextPage) { %>
                        <a href="?<%= new URLSearchParams({...filters, page: pagination.currentPage + 1}).toString() %>"
                           class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition">
                            Next
                        </a>
                    <% } %>
                </div>
            </div>
        </div>
    </main>

    <script>
        async function updateStatus(selectElement) {
            const orderId = selectElement.dataset.orderId;
            const newStatus = selectElement.value;
            const originalStatus = selectElement.querySelector('[selected]').value;

            try {
                const response = await fetch(`/admin/orders/${orderId}/toggle-status`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status: newStatus }),
                    credentials: 'include'
                });

                const data = await response.json();

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: `Status updated to ${newStatus}`,
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 1500
                    });

                    // If status was changed to Cancelled, replace the select with a static span
                    if (newStatus === 'Cancelled') {
                        const staticStatus = document.createElement('span');
                        staticStatus.className = 'px-3 py-1 bg-red-500 text-white rounded-lg';
                        staticStatus.textContent = 'Cancelled';
                        selectElement.parentNode.replaceChild(staticStatus, selectElement);
                    }
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to update order status'
                    });
                    selectElement.value = originalStatus;  // Reset to previous value
                }
            } catch (error) {
                console.error('Error updating status:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while updating the status'
                });
                selectElement.value = originalStatus;  // Reset to previous value
            }
        }

        // Function to handle form submission
        document.getElementById('filterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            formData.set('page', '1'); // Reset to first page when filters change
            const params = new URLSearchParams(formData);
            window.location.href = `/admin/orders?${params.toString()}`;
        });

        // Function to reset filters
        function resetFilters() {
            window.location.href = '/admin/orders?page=1';
        }

        // Add debounce function for search input
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Add event listener for search input with debounce
        const searchInput = document.querySelector('input[name="search"]');
        if (searchInput) {
            searchInput.addEventListener('input', debounce(function(e) {
                const formData = new FormData(document.getElementById('filterForm'));
                formData.set('page', '1'); // Reset to first page when search changes
                const params = new URLSearchParams(formData);
                window.location.href = `/admin/orders?${params.toString()}`;
            }, 500));
        }

        // Dynamically adjust sidebar height to match main content
        document.addEventListener('DOMContentLoaded', () => {
            const sidebar = document.querySelector('.sidebar');
            const main = document.querySelector('main');
            const updateHeight = () => {
                const mainHeight = main.offsetHeight;
                sidebar.style.height = `${Math.max(mainHeight, window.innerHeight)}px`;
            };
            updateHeight();
            window.addEventListener('resize', updateHeight);
        });
    </script>
</body>
</html>