<!-- orders.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>InfinityTech Admin - Orders Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <style>
        :root {
            --sidebar-width: 16rem;
            --primary-bg: #1e1e2f; /* Dark blue-gray */
            --secondary-bg: #2a2438; /* Deep purple-gray */
            --content-bg: #2d2d44; /* Lighter dark blue for content */
            --accent-start: #d4af37; /* Rich Gold */
            --accent-end: #f9e076;   /* Light Yellow */
            --text-color: #e5e7eb; /* Light gray for text */
        }

        /* Gradient Background */
        .gradient-bg {
            @apply bg-gradient-to-br from-[var(--primary-bg)] to-[var(--secondary-bg)] !important;
        }

        /* Glass Effect */
        .glass-effect-dark {
            @apply bg-[var(--content-bg)]/80 backdrop-blur-md border border-white/10;
        }

        /* Golden Yellow Gradient for Buttons */
        .golden-button {
            @apply bg-gradient-to-r from-[var(--accent-start)] to-[var(--accent-end)] text-white px-4 py-2 rounded-lg shadow-lg hover:scale-105 transition-all duration-300;
        }

        /* Typography and Base Styles */
        body {
            @apply font-sans text-[var(--text-color)] min-h-screen m-0 p-0 bg-[var(--primary-bg)] !important;
        }

        /* Custom Animations */
        @keyframes gradientAnimation {
            0% { background-position: 0% 0%; }
            50% { background-position: 100% 100%; }
            100% { background-position: 0% 0%; }
        }
        .animate-gradient {
            background-size: 200% 200%;
            animation: gradientAnimation 15s ease infinite;
        }

        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .animate-fade-in-up {
            animation: fadeInUp 0.8s ease-out forwards;
        }
        .animation-delay-200 { animation-delay: 0.2s; }
        .animation-delay-400 { animation-delay: 0.4s; }

        /* Table Styles */
        tr:hover {
            @apply bg-[var(--content-bg)]/50;
        }

        /* Pagination Styles */
        .pagination-button {
            @apply inline-flex items-center px-4 py-2 glass-effect-dark text-sm text-[var(--text-color)] hover:bg-[var(--secondary-bg)] transition-all duration-300;
        }
        .pagination-button.active {
            @apply bg-[var(--accent-start)]/80 text-white;
        }

        /* Main content styling */
        main {
            margin-left: var(--sidebar-width);
            width: calc(100% - var(--sidebar-width));
            min-height: 100vh;
        }

        /* Sidebar styling */
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            width: var(--sidebar-width);
            z-index: 100;
            animation: slideIn 0.5s ease-out forwards;
        }
        @keyframes slideIn {
            from { transform: translateX(-100%); }
            to { transform: translateX(0); }
        }
    </style>
</head>

<body class="gradient-bg animate-gradient" style="background: linear-gradient(to bottom right, #1e1e2f, #2a2438) !important;">
    <!-- Sidebar -->
    <div class="sidebar fixed top-0 left-0 h-full w-64 md:w-[var(--sidebar-width)] bg-[var(--primary-bg)] z-50 transition-transform duration-300 md:translate-x-0 -translate-x-full shadow-lg">
        <div class="flex flex-col h-full text-[var(--text-color)]">
            <div class="flex items-center justify-start p-6 border-b border-white/10">
                <span class="text-2xl font-extrabold golden-button bg-clip-text text-transparent">InfinityTech</span>
            </div>
            
            <nav class="flex-1 space-y-2 p-4 overflow-y-auto">
                <% const navItems = [
                    { href: '/admin/dashboard', icon: 'fa-home', label: 'Dashboard', active: (typeof path !== 'undefined' && path === '/admin/dashboard') },
                    { href: '/admin/products', icon: 'fa-box', label: 'Products', active: (typeof path !== 'undefined' && path.includes('/admin/product')) },
                    { href: '/admin/categories', icon: 'fa-tags', label: 'Categories', active: (typeof path !== 'undefined' && path.includes('/admin/categor')) },
                    { href: '/admin/users', icon: 'fa-users', label: 'Customers', active: (typeof path !== 'undefined' && path === '/admin/users') },
                    { href: '/admin/orders', icon: 'fa-shopping-bag', label: 'Orders', active: (typeof path !== 'undefined' && path === '/admin/orders') },
                    { href: '/admin/return/requests', icon: 'fa-undo', label: 'Return Orders', active: (typeof path !== 'undefined' && path === '/admin/return/requests') },
                    { href: '/admin/offers', icon: 'fa-percentage', label: 'Offer', active: (typeof path !== 'undefined' && path === '/admin/offers') },
                    { href: '/admin/coupons', icon: 'fa-ticket-alt', label: 'Coupon', active: (typeof path !== 'undefined' && path === '/admin/coupons') },
                    { href: '/admin/logout', icon: 'fa-sign-out-alt', label: 'Logout', active: (typeof path !== 'undefined' && path === '/admin/logout') }
                ]; %>
                <% navItems.forEach(item => { %>
                    <a href="<%= item.href %>" class="flex items-center py-2.5 px-4 rounded transition duration-300 group <%= item.active ? 'golden-button text-white scale-105' : 'text-[var(--text-color)] hover:bg-[var(--secondary-bg)] hover:text-white hover:scale-105' %>">
                        <i class="fas <%= item.icon %> w-6 transition-transform duration-300 group-hover:rotate-12"></i>
                        <span class="ml-3"><%= item.label %></span>
                    </a>
                <% }); %>
            </nav>
        </div>
    </div>

    <main class="flex-1 p-6">
        <div class="glass-effect-dark p-6 rounded-xl shadow-lg animate-fade-in-up">
            <h1 class="text-4xl font-extrabold bg-gradient-to-r from-[#d4af37] to-[#f9e076] bg-clip-text text-transparent tracking-tight text-center">Orders Management</h1>
            
            <form id="filterForm" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 glass-effect-dark p-4 rounded-lg shadow animate-fade-in-up animation-delay-200">
                <input type="text" name="search" placeholder="Search by Order ID or Customer"
                    value="<%= filters?.search || '' %>"
                    class="bg-[var(--content-bg)] text-[var(--text-color)] rounded-lg px-4 py-2 focus:ring-2 focus:ring-[var(--accent-start)] border border-white/10">
                
                <select name="status" class="bg-[var(--content-bg)] text-[var(--text-color)] rounded-lg px-4 py-2 focus:ring-2 focus:ring-[var(--accent-start)] border border-white/10">
                    <option value="All">All Status</option>
                    <option value="Pending" <%= filters?.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                    <option value="Processing" <%= filters?.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                    <option value="Shipped" <%= filters?.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                    <option value="Delivered" <%= filters?.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                    <option value="Cancelled" <%= filters?.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                </select>
                
                <div class="flex space-x-2">
                    <input type="date" name="startDate" value="<%= filters?.startDate || '' %>"
                        class="bg-[var(--content-bg)] text-[var(--text-color)] rounded-lg px-4 py-2 focus:ring-2 focus:ring-[var(--accent-start)] border border-white/10">
                    <input type="date" name="endDate" value="<%= filters?.endDate || '' %>"
                        class="bg-[var(--content-bg)] text-[var(--text-color)] rounded-lg px-4 py-2 focus:ring-2 focus:ring-[var(--accent-start)] border border-white/10">
                </div>
                
                <div class="flex space-x-2">
                    <button type="submit" class="golden-button">Apply Filters</button>
                    <button type="button" onclick="resetFilters()" class="bg-[var(--secondary-bg)] hover:bg-[var(--content-bg)] text-[var(--text-color)] px-4 py-2 rounded-lg transition-all duration-300">Reset</button>
                </div>
            </form>
            
            <div class="overflow-x-auto mt-6 animate-fade-in-up animation-delay-400">
                <table class="w-full table-auto border-collapse text-[var(--text-color)] rounded-lg">
                    <thead class="bg-[var(--secondary-bg)]">
                        <tr>
                            <th class="px-6 py-4">Order ID</th>
                            <th class="px-6 py-4">Customer</th>
                            <th class="px-6 py-4">Total Amount</th>
                            <th class="px-6 py-4">Status</th>
                            <th class="px-6 py-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (orders.length > 0) { %>
                            <% orders.forEach(order => { %>
                                <tr class="hover:bg-[var(--content-bg)]/50 transition border-b border-white/10">
                                    <td class="px-6 py-4"><%= order._id %></td>
                                    <td class="px-6 py-4"><%= order.user.name %></td>
                                    <td class="px-6 py-4">₹<%= order.orderAmount.toFixed(2) %></td>
                                    <td class="px-6 py-4">
                                        <% if (order.status === 'Cancelled') { %>
                                            <span class="px-3 py-1 bg-red-500/20 text-red-300 border border-red-500/20 rounded-lg">Cancelled</span>
                                        <% } else { %>
                                            <select class="bg-[var(--content-bg)] text-[var(--text-color)] rounded-lg py-1 px-2 focus:ring-2 focus:ring-[var(--accent-start)] border border-white/10"
                                            data-order-id="<%= order._id %>" onchange="updateStatus(this)">
                                                <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                                <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                                <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                                <option value="Out for Delivery" <%= order.status === 'Out for Delivery' ? 'selected' : '' %>>Out for Delivery</option>
                                                <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                                <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                            </select>
                                        <% } %>
                                    </td>
                                    <td class="px-6 py-4">
                                        <a href="/admin/viewdetails/<%= order._id %>" class="text-[var(--accent-start)] hover:text-[var(--accent-end)] transition">
                                            <i class="fas fa-eye mr-2"></i>View Details
                                        </a>
                                    </td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr>
                                <td colspan="5" class="px-6 py-8 text-center text-gray-400">No orders found.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>

                <div class="text-center text-white-400 mb-4">
                    Showing page <%= pagination.currentPage %> of <%= pagination.totalPages %>
                </div>

                <div class="mt-6 flex justify-center items-center space-x-4">
                    <% if (pagination.hasPrevPage) { %>
                        <a href="?<%= new URLSearchParams({...filters, page: pagination.currentPage - 1}).toString() %>"
                           class="pagination-button">
                            Previous
                        </a>
                    <% } %>
                
                    <div class="flex items-center text-white-400 space-x-2">
                        <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                            <a href="?<%= new URLSearchParams({...filters, page: i}).toString() %>"
                               class="pagination-button <%= pagination.currentPage === i ? 'active' : '' %>">
                                <%= i %>
                            </a>
                        <% } %>
                    </div>
                
                    <% if (pagination.hasNextPage) { %>
                        <a href="?<%= new URLSearchParams({...filters, page: pagination.currentPage + 1}).toString() %>"
                           class="pagination-button text-white">
                            Next
                        </a>
                    <% } %>
                </div>
            </div>
        </div>
    </main>

    <script>
        // Sidebar Toggle for Mobile
        const sidebar = document.querySelector('.sidebar');
        const sidebarToggle = document.getElementById('sidebarToggle');
        if (sidebarToggle) {
            sidebarToggle.addEventListener('click', () => sidebar.classList.toggle('-translate-x-full'));
        }

        // Close sidebar on outside click (mobile)
        document.addEventListener('click', (e) => {
            if (window.innerWidth < 768 && !sidebar.contains(e.target) && !sidebarToggle?.contains(e.target)) {
                sidebar.classList.add('-translate-x-full');
            }
        });

        // Update Order Status
        async function updateStatus(selectElement) {
            const orderId = selectElement.dataset.orderId;
            const newStatus = selectElement.value;
            const originalStatus = selectElement.querySelector('[selected]').value;

            try {
                const response = await fetch(`/admin/orders/${orderId}/toggle-status`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status: newStatus }),
                    credentials: 'include'
                });

                const data = await response.json();

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: `Status updated to ${newStatus}`,
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 1500,
                        background: '#1e1e2f',
                        color: '#e5e7eb',
                        confirmButtonColor: '#d4af37'
                    });

                    // If status changed to Cancelled, replace select with static span
                    if (newStatus === 'Cancelled') {
                        const staticStatus = document.createElement('span');
                        staticStatus.className = 'px-3 py-1 bg-red-500/20 text-red-300 border border-red-500/20 rounded-lg';
                        staticStatus.textContent = 'Cancelled';
                        selectElement.parentNode.replaceChild(staticStatus, selectElement);
                    }
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to update order status',
                        background: '#1e1e2f',
                        color: '#e5e7eb',
                        confirmButtonColor: '#d4af37'
                    });
                    selectElement.value = originalStatus;  // Reset to previous value
                }
            } catch (error) {
                console.error('Error updating status:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while updating the status',
                    background: '#1e1e2f',
                    color: '#e5e7eb',
                    confirmButtonColor: '#d4af37'
                });
                selectElement.value = originalStatus;  // Reset to previous value
            }
        }

        // Form Submission
        document.getElementById('filterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            formData.set('page', '1'); // Reset to first page when filters change
            const params = new URLSearchParams(formData);
            window.location.href = `/admin/orders?${params.toString()}`;
        });

        // Reset Filters
        function resetFilters() {
            window.location.href = '/admin/orders?page=1';
        }

        // Debounce Function for Search Input
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Search Input with Debounce
        const searchInput = document.querySelector('input[name="search"]');
        if (searchInput) {
            searchInput.addEventListener('input', debounce(function(e) {
                const formData = new FormData(document.getElementById('filterForm'));
                formData.set('page', '1'); // Reset to first page when search changes
                const params = new URLSearchParams(formData);
                window.location.href = `/admin/orders?${params.toString()}`;
            }, 500));
        }

        // Adjust Sidebar Height
        document.addEventListener('DOMContentLoaded', () => {
            const sidebar = document.querySelector('.sidebar');
            const main = document.querySelector('main');
            const updateHeight = () => {
                const mainHeight = main.offsetHeight;
                sidebar.style.height = `${Math.max(mainHeight, window.innerHeight)}px`;
            };
            updateHeight();
            window.addEventListener('resize', updateHeight);

            // Animate Elements
            const animateElements = () => {
                const elements = document.querySelectorAll('.animate-fade-in-up');
                elements.forEach((element, index) => {
                    element.style.animationDelay = `${index * 0.2}s`;
                });
            };
            animateElements();
        });
    </script>
</body>
</html>