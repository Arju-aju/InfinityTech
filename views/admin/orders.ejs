<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Orders Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body class="bg-gray-950 text-gray-200 min-h-screen flex">
    
   <%- include('./partials/adminSidebar.ejs') %> 

    <main class="flex-1 p-6 md:ml-68">
        <div class="bg-gray-900 p-6 rounded-xl shadow-lg">
            <h1 class="text-4xl font-extrabold mb-6 text-center">Orders Management</h1>
            
            <form id="filterForm" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 bg-gray-800 p-4 rounded-lg shadow">
                <input type="text" name="search" placeholder="Search by Order ID or Customer"
                    value="<%= filters?.search || '' %>"
                    class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                
                <select name="status" class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                    <option value="All">All Status</option>
                    <option value="Pending" <%= filters?.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                    <option value="Processing" <%= filters?.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                    <option value="Shipped" <%= filters?.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                    <option value="Delivered" <%= filters?.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                    <option value="Cancelled" <%= filters?.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                </select>
                
                <div class="flex space-x-2">
                    <input type="date" name="startDate" value="<%= filters?.startDate || '' %>"
                        class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                    <input type="date" name="endDate" value="<%= filters?.endDate || '' %>"
                        class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500">
                </div>
                
                <div class="flex space-x-2">
                    <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg">Apply Filters</button>
                    <button type="button" onclick="resetFilters()" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg">Reset</button>
                </div>
            </form>
            
            <div class="overflow-x-auto mt-6">
                <table class="w-full table-auto border-collapse bg-gray-800 text-white rounded-lg">
                    <thead class="bg-gray-700">
                        <tr>
                            <th class="px-6 py-4">Order ID</th>
                            <th class="px-6 py-4">Customer</th>
                            <th class="px-6 py-4">Total Amount</th>
                            <th class="px-6 py-4">Status</th>
                            <th class="px-6 py-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (orders.length > 0) { %>
                            <% orders.forEach(order => { %>
                                <tr class="hover:bg-gray-700 transition">
                                    <td class="px-6 py-4"><%= order._id %></td>
                                    <td class="px-6 py-4"><%= order.user.name %></td>
                                    <td class="px-6 py-4">â‚¹<%= order.orderAmount.toFixed(2) %></td>
                                    <td class="px-6 py-4">
                                        <% if (order.status === 'Cancelled') { %>
                                            <span class="px-3 py-1 bg-red-500 text-white rounded-lg">Cancelled</span>
                                        <% } else { %>
                                            <select class="bg-gray-700 text-white rounded-lg py-1 px-2 focus:ring-2 focus:ring-blue-500"
                                            data-order-id="<%= order._id %>" onchange="updateStatus(this)">
                                        <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                                        <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                        <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                        <option value="Out for Delivery" <%= order.status === 'Out for Delivery' ? 'selected' : '' %>>Out for Delivery</option>
                                        <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                        <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                    </select>
                                        <% } %>
                                    </td>
                                    <td class="px-6 py-4">
                                        <a href="/admin/viewdetails/<%= order._id %>" class="text-blue-400 hover:text-blue-300 transition">
                                            <i class="fas fa-eye"></i> View Details
                                        </a>
                                    </td>
                                    
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr>
                                <td colspan="5" class="px-6 py-8 text-center text-gray-400">No orders found.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>

                <div class="text-center text-gray-400 mb-4">
                    Showing page <%= pagination.currentPage %> of <%= pagination.totalPages %>
                </div>

                <div class="mt-6 flex justify-center items-center space-x-4">
                    <% if (pagination.hasPrevPage) { %>
                        <a href="?<%= new URLSearchParams({...filters, page: pagination.currentPage - 1}).toString() %>"
                           class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition">
                            Previous
                        </a>
                    <% } %>
                
                    <div class="flex items-center space-x-2">
                        <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                            <a href="?<%= new URLSearchParams({...filters, page: i}).toString() %>"
                               class="px-4 py-2 rounded-lg transition <%= pagination.currentPage === i ? 'bg-blue-600' : 'bg-gray-700 hover:bg-gray-600' %>">
                                <%= i %>
                            </a>
                        <% } %>
                    </div>
                
                    <% if (pagination.hasNextPage) { %>
                        <a href="?<%= new URLSearchParams({...filters, page: pagination.currentPage + 1}).toString() %>"
                           class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition">
                            Next
                        </a>
                    <% } %>
                </div>

            </div>
        </div>
    </main>

    <!-- Order Details Modal -->
 

    <script>
    async function updateStatus(selectElement) {
    const orderId = selectElement.dataset.orderId;
    const newStatus = selectElement.value;
    const originalStatus = selectElement.querySelector('[selected]').value;

    try {
        const response = await fetch(`/admin/orders/${orderId}/toggle-status`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status: newStatus }),
            credentials: 'include'
        });

        const data = await response.json();

        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: `Status updated to ${newStatus}`,
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 1500
            });

            // If status was changed to Cancelled, replace the select with a static span
            if (newStatus === 'Cancelled') {
                const staticStatus = document.createElement('span');
                staticStatus.className = 'px-3 py-1 bg-red-500 text-white rounded-lg';
                staticStatus.textContent = 'Cancelled';
                selectElement.parentNode.replaceChild(staticStatus, selectElement);
            }
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Failed to update order status'
            });
            selectElement.value = originalStatus;  // Reset to previous value
        }
    } catch (error) {
        console.error('Error updating status:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while updating the status'
        });
        selectElement.value = originalStatus;  // Reset to previous value
    }
}

        // Function to open order details modal
        async function openOrderDetails(orderId) {
            try {
                const response = await fetch(`/admin/orders/${orderId}`);

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const order = await response.json();

                // Build order details dynamically
                document.getElementById('modalContent').innerHTML = `
                    <p><strong>Order ID:</strong> ${order._id}</p>
                    <p><strong>Customer:</strong> ${order.user.name}</p>
                    <p><strong>Email:</strong> ${order.user.email}</p>
                    <p><strong>Total Amount:</strong> â‚¹${order.orderAmount ? order.orderAmount.toFixed(2) : '0.00'}</p>
                    <p><strong>Status:</strong> ${order.status}</p>
                    <p><strong>Address:</strong> ${order.deliveryAddress.address},${order.deliveryAddress.city},${order.deliveryAddress.landmark}, ${order.deliveryAddress.street}, ${order.deliveryAddress.city}, ${order.deliveryAddress.state}, ${order.deliveryAddress.pincode}, ${order.deliveryAddress.country}</p>

                    <p class="mt-4"><strong>Products:</strong></p>
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        ${order.products.map(product => `
                            <div class="flex items-center space-x-4 bg-gray-800 p-3 rounded-md shadow">
                                <img src="${product.productId.image}" alt="${product.productId.name}" class="w-16 h-16 object-cover rounded">
                                <div>
                                    <p class="font-semibold">${product.productId.name}</p>
                                    <p class="text-sm text-gray-400">$${product.productId.price}</p>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                `;

                document.getElementById('orderDetailsModal').classList.remove('hidden'); 
            } catch (error) {
                console.error('Error fetching order details:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to fetch order details',
                });
            }
        }

        // Function to close order details modal
        function closeOrderDetails() {
            document.getElementById('orderDetailsModal').classList.add('hidden');
        }

        // Function to handle form submission
        document.getElementById('filterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new URLSearchParams(new FormData(this));
            window.location.href = `/admin/orders?${formData.toString()}`;
        });

        // Function to reset filters
        function resetFilters() {
            window.location.href = '/admin/orders';
        }

        // Add debounce function for search input
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Add event listener for search input with debounce
        const searchInput = document.querySelector('input[name="search"]');
        if (searchInput) {
            searchInput.addEventListener('input', debounce(function(e) {
                document.getElementById('filterForm').submit();
            }, 500));
        }

        // Close modal when clicking outside
        document.getElementById('orderDetailsModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeOrderDetails();
            }
        });

        // Add escape key listener for modal
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && !document.getElementById('orderDetailsModal').classList.contains('hidden')) {
                closeOrderDetails();
            }
        });
    </script>
    <script>
        // Update form submission to reset pagination when filters change
        document.getElementById('filterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            formData.set('page', '1'); // Reset to first page when filters change
            const params = new URLSearchParams(formData);
            window.location.href = `/admin/orders?${params.toString()}`;
        });
        
        // Update reset filters function
        function resetFilters() {
            window.location.href = '/admin/orders?page=1';
        }
        
        // Update debounce handler for search
        const searchInput = document.querySelector('input[name="search"]');
        if (searchInput) {
            searchInput.addEventListener('input', debounce(function(e) {
                const formData = new FormData(document.getElementById('filterForm'));
                formData.set('page', '1'); // Reset to first page when search changes
                const params = new URLSearchParams(formData);
                window.location.href = `/admin/orders?${params.toString()}`;
            }, 500));
        }
        </script>
</body>
</html>