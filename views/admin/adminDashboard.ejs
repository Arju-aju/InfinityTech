<%- include('./partials/adminHeader.ejs') %>

<div class="flex min-h-screen bg-gray-900 text-gray-100">
    <!-- Sidebar -->
    <%- include('./partials/adminSidebar.ejs') %>

    <!-- Main Content -->
    <div class="flex-1 p-6" style="margin-left: var(--sidebar-width, 16rem);">
        <div class="max-w-7xl mx-auto space-y-8">
            <!-- Dashboard Header -->
            <div class="bg-gradient-to-r from-gray-800 to-gray-700 p-6 rounded-xl shadow-lg relative overflow-hidden">
                <h1 class="text-4xl font-bold text-white">Sales Dashboard</h1>
                <p class="text-gray-400 mt-2">Real-time analytics for InfinityTech</p>
            </div>

            <!-- Filter Section -->
            <div class="bg-gray-800 p-6 rounded-xl shadow-lg flex flex-col md:flex-row justify-between items-center gap-4">
                <div class="flex items-center gap-4">
                    <input type="date" id="startDate" class="bg-gray-700 text-gray-100 rounded-lg px-4 py-2 border border-gray-600 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/50 transition-all duration-300">
                    <span class="text-gray-400">to</span>
                    <input type="date" id="endDate" class="bg-gray-700 text-gray-100 rounded-lg px-4 py-2 border border-gray-600 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/50 transition-all duration-300">
                </div>
                <div class="flex items-center gap-4">
                    <select id="timeFrame" class="bg-gray-700 text-gray-100 rounded-lg px-4 py-2 border border-gray-600 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/50 transition-all duration-300">
                        <option value="daily" selected>Daily</option>
                        <option value="weekly">Weekly</option>
                        <option value="monthly">Monthly</option>
                        <option value="yearly">Yearly</option>
                    </select>
                    <button id="applyFilter" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg shadow-md transition-all duration-300">Apply Filter</button>
                    <div class="relative">
                        <button id="downloadReport" class="bg-gold-600 hover:bg-gold-700 text-white px-4 py-2 rounded-lg shadow-md flex items-center gap-2 transition-all duration-300">
                            <i class="fas fa-download"></i> Download Report
                        </button>
                        <div id="downloadOptions" class="absolute hidden right-0 mt-2 w-48 bg-gray-800 rounded-lg shadow-lg z-10">
                            <button id="downloadPDF" class="block w-full text-left px-4 py-2 text-gray-100 hover:bg-gray-700">PDF</button>
                            <button id="downloadExcel" class="block w-full text-left px-4 py-2 text-gray-100 hover:bg-gray-700">Excel</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Metric Cards (Limited to 5 in a single row) -->
            <div class="metric-grid grid-cols-1 sm:grid-cols-3 md:grid-cols-5 gap-6 max-w-full overflow-x-auto">
                <div class="bg-gray-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 card">
                    <div class="flex items-center gap-4">
                        <i class="fas fa-dollar-sign text-blue-500 text-2xl"></i>
                        <div>
                            <p class="text-gray-400 text-sm">Total Sales</p>
                            <p class="text-2xl font-bold" id="totalSales">₹<%= totalSales.toFixed(2) %></p>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 card">
                    <div class="flex items-center gap-4">
                        <i class="fas fa-shopping-cart text-blue-500 text-2xl"></i>
                        <div>
                            <p class="text-gray-400 text-sm">Total Orders</p>
                            <p class="text-2xl font-bold" id="totalOrders"><%= totalOrders %></p>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 card">
                    <div class="flex items-center gap-4">
                        <i class="fas fa-money-bill-wave text-blue-500 text-2xl"></i>
                        <div>
                            <p class="text-gray-400 text-sm">Avg. Order Value</p>
                            <p class="text-2xl font-bold" id="avgOrderValue">₹0</p>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 card">
                    <div class="flex items-center gap-4">
                        <i class="fas fa-boxes text-blue-500 text-2xl"></i>
                        <div>
                            <p class="text-gray-400 text-sm">Total Items Sold</p>
                            <p class="text-2xl font-bold" id="totalItems">0</p>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 card">
                    <div class="flex items-center gap-4">
                        <i class="fas fa-ticket-alt text-blue-500 text-2xl"></i>
                        <div>
                            <p class="text-gray-400 text-sm">Total Coupons Used</p>
                            <p class="text-2xl font-bold" id="totalCouponsUsed">0</p>
                        </div>
                    </div>
                </div>
                <!-- Hidden Cards -->
                <div class="hidden bg-gray-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 card">
                    <div class="flex items-center gap-4">
                        <i class="fas fa-gift text-blue-500 text-2xl"></i>
                        <div>
                            <p class="text-gray-400 text-sm">Coupon Deductions</p>
                            <p class="text-2xl font-bold" id="couponDeductions">₹0</p>
                        </div>
                    </div>
                </div>
                <div class="hidden bg-gray-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 card">
                    <div class="flex items-center gap-4">
                        <i class="fas fa-percentage text-blue-500 text-2xl"></i>
                        <div>
                            <p class="text-gray-400 text-sm">Total Discounts</p>
                            <p class="text-2xl font-bold" id="totalDiscounts">₹0</p>
                        </div>
                    </div>
                </div>
                <div class="hidden bg-gray-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 card">
                    <div class="flex items-center gap-4">
                        <i class="fas fa-chart-line text-blue-500 text-2xl"></i>
                        <div>
                            <p class="text-gray-400 text-sm">Net Revenue</p>
                            <p class="text-2xl font-bold" id="netRevenue">₹0</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Top Sellers Section -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="bg-gray-800 p-6 rounded-xl shadow-md">
                    <h3 class="text-lg font-bold mb-4">Top Selling Product</h3>
                    <div id="topProduct" class="flex items-center gap-4">
                        <img id="topProductImage" src="" alt="Top Product" class="w-16 h-16 rounded-lg object-cover">
                        <div>
                            <p id="topProductName" class="text-gray-100 font-semibold">Loading...</p>
                            <p id="topProductUnits" class="text-gray-400 text-sm">0 units sold</p>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-800 p-6 rounded-xl shadow-md">
                    <h3 class="text-lg font-bold mb-4">Top Selling Category</h3>
                    <div id="topCategory" class="flex items-center gap-4">
                        <div>
                            <p id="topCategoryName" class="text-gray-100 font-semibold">Loading...</p>
                            <p id="topCategoryValue" class="text-gray-400 text-sm">0% contribution</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Visualizations -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div class="bg-gray-800 p-6 rounded-xl shadow-md lg:col-span-2">
                    <h3 class="text-lg font-bold mb-4">Sales Trends</h3>
                    <div style="min-height: 400px;">
                        <canvas id="salesChart"></canvas>
                    </div>
                </div>
                <div class="bg-gray-800 p-6 rounded-xl shadow-md">
                    <h3 class="text-lg font-bold mb-4">Payment Methods</h3>
                    <div style="min-height: 300px;">
                        <canvas id="paymentMethodChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<%- include('./partials/adminFooter.ejs') %>

<script>
    const initialSales = <%- initialSales %>;
    const couponStats = JSON.parse('<%- couponStats %>');

    document.addEventListener('DOMContentLoaded', function() {
        const today = new Date();
        document.getElementById('endDate').value = today.toISOString().split('T')[0];
        document.getElementById('startDate').value = new Date(today.setDate(today.getDate() - 30)).toISOString().split('T')[0];

        loadInitialData();
        fetchTopSellers();
        document.getElementById('applyFilter').addEventListener('click', fetchSalesData);

        // Download button functionality
        const downloadBtn = document.getElementById('downloadReport');
        const downloadOptions = document.getElementById('downloadOptions');
        const downloadPDF = document.getElementById('downloadPDF');
        const downloadExcel = document.getElementById('downloadExcel');

        downloadBtn.addEventListener('click', () => {
            downloadOptions.classList.toggle('hidden');
        });

        downloadPDF.addEventListener('click', () => downloadReport('pdf'));
        downloadExcel.addEventListener('click', () => downloadReport('excel'));

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            if (!downloadBtn.contains(e.target) && !downloadOptions.contains(e.target)) {
                downloadOptions.classList.add('hidden');
            }
        });
    });

    function loadInitialData() {
        const summary = initialSales.reduce((acc, curr) => ({
            totalSales: acc.totalSales + curr.sales,
            totalOrders: acc.totalOrders + curr.orders,
            totalItems: acc.totalItems + curr.totalItems,
            totalCouponsUsed: acc.totalCouponsUsed + curr.totalCouponsUsed,
            couponDeductions: acc.couponDeductions + curr.couponDeductions
        }), { totalSales: 0, totalOrders: 0, totalItems: 0, totalCouponsUsed: 0, couponDeductions: 0 });

        const totalSales = summary.totalSales;
        const totalOrders = <%= totalOrders %>; // From server
        const avgOrderValue = totalOrders > 0 ? totalSales / totalOrders : 0;
        const netRevenue = totalSales - summary.couponDeductions;

        document.getElementById('totalSales').textContent = `₹${totalSales.toFixed(2)}`;
        document.getElementById('totalOrders').textContent = totalOrders;
        document.getElementById('avgOrderValue').textContent = `₹${avgOrderValue.toFixed(2)}`;
        document.getElementById('totalItems').textContent = summary.totalItems;
        document.getElementById('totalCouponsUsed').textContent = summary.totalCouponsUsed;
        document.getElementById('couponDeductions').textContent = `₹${summary.couponDeductions.toFixed(2)}`;
        document.getElementById('totalDiscounts').textContent = `₹${summary.couponDeductions.toFixed(2)}`; // Assuming discounts = coupon deductions
        document.getElementById('netRevenue').textContent = `₹${netRevenue.toFixed(2)}`;

        updateSalesChart(initialSales);
        renderPaymentMethodChart([]); // Placeholder, updated by fetchSalesData
    }

    async function fetchSalesData() {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const timeFrame = document.getElementById('timeFrame').value;

        try {
            const response = await fetch(`/admin/sales-report/data?startDate=${startDate}&endDate=${endDate}&timeFrame=${timeFrame}`);
            if (!response.ok) throw new Error('Failed to fetch sales data');
            const result = await response.json();
            if (result.success) {
                const { salesData, summary, paymentMethodStats } = result.data;
                document.getElementById('totalSales').textContent = `₹${summary.totalSales.toFixed(2)}`;
                document.getElementById('totalOrders').textContent = summary.totalOrders;
                document.getElementById('avgOrderValue').textContent = `₹${summary.avgOrderValue.toFixed(2)}`;
                document.getElementById('totalItems').textContent = summary.totalItems;
                document.getElementById('totalCouponsUsed').textContent = summary.totalCouponsUsed;
                document.getElementById('couponDeductions').textContent = `₹${summary.couponDeductions.toFixed(2)}`;
                document.getElementById('totalDiscounts').textContent = `₹${summary.couponDeductions.toFixed(2)}`;
                document.getElementById('netRevenue').textContent = `₹${(summary.totalSales - summary.couponDeductions).toFixed(2)}`;

                updateSalesChart(salesData);
                renderPaymentMethodChart(paymentMethodStats);
            }
        } catch (error) {
            console.error('Error fetching sales data:', error);
            alert('Failed to load sales data.');
        }
    }

    async function fetchTopSellers() {
        try {
            const response = await fetch('/admin/top-sellers');
            if (!response.ok) throw new Error('Failed to fetch top sellers');
            const data = await response.json();
            if (data.success) {
                const topProduct = data.products[0];
                document.getElementById('topProductImage').src = topProduct.image || 'https://via.placeholder.com/64';
                document.getElementById('topProductName').textContent = topProduct.name;
                document.getElementById('topProductUnits').textContent = `${topProduct.quantity} units sold`;

                const topCategory = data.categories[0];
                const totalItems = data.categories.reduce((sum, cat) => sum + cat.value, 0);
                const contribution = totalItems > 0 ? (topCategory.value / totalItems * 100).toFixed(2) : 0;
                document.getElementById('topCategoryName').textContent = topCategory.name;
                document.getElementById('topCategoryValue').textContent = `${contribution}% contribution`;
            }
        } catch (error) {
            console.error('Error fetching top sellers:', error);
            document.getElementById('topProductName').textContent = 'N/A';
            document.getElementById('topCategoryName').textContent = 'N/A';
        }
    }

    let salesChart;
    function updateSalesChart(data) {
        const ctx = document.getElementById('salesChart').getContext('2d');
        const labels = data.map(item => item.date);
        const sales = data.map(item => item.sales);

        if (salesChart) salesChart.destroy();
        salesChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Sales',
                    data: sales,
                    borderColor: '#3b82f6', // Blue
                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                    borderWidth: 2,
                    pointBackgroundColor: '#fff',
                    pointBorderColor: '#3b82f6',
                    pointRadius: 4,
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { labels: { color: '#d1d5db' } },
                    tooltip: { backgroundColor: 'rgba(0, 0, 0, 0.8)', callbacks: { label: (context) => `₹${context.parsed.y.toFixed(2)}` } }
                },
                scales: {
                    x: { grid: { color: 'rgba(255, 255, 255, 0.05)' }, ticks: { color: '#d1d5db' } },
                    y: { grid: { color: 'rgba(255, 255, 255, 0.05)' }, ticks: { color: '#d1d5db', callback: (value) => `₹${value}` } }
                }
            }
        });
    }

    let paymentChart;
    function renderPaymentMethodChart(paymentMethodStats) {
        const ctx = document.getElementById('paymentMethodChart').getContext('2d');
        const labels = paymentMethodStats.map(stat => stat._id);
        const values = paymentMethodStats.map(stat => stat.count);

        if (paymentChart) paymentChart.destroy();
        paymentChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels.length ? labels : ['Razorpay', 'Cash'],
                datasets: [{
                    data: values.length ? values : [0, 0],
                    backgroundColor: ['#3b82f6', '#d4af37'], // Blue for Razorpay, Gold for Cash
                    borderColor: '#1f2937',
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { position: 'top', labels: { color: '#d1d5db' } },
                    tooltip: {
                        callbacks: {
                            label: (context) => {
                                const total = values.reduce((a, b) => a + b, 0) || 1;
                                const percentage = ((context.raw / total) * 100).toFixed(2);
                                return `${context.label}: ${context.raw} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    }

    function downloadReport(format) {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const timeFrame = document.getElementById('timeFrame').value;

        const url = `/admin/sales-report/download?startDate=${startDate}&endDate=${endDate}&timeFrame=${timeFrame}&format=${format}`;
        window.location.href = url;
    }
</script>

<style>
    :root {
        --blue-600: #3b82f6;
        --gold-600: #d4af37;
    }
    .bg-blue-600 { background-color: var(--blue-600); }
    .bg-gold-600 { background-color: var(--gold-600); }
    .hover\:bg-blue-700:hover { background-color: #2563eb; }
    .hover\:bg-gold-700:hover { background-color: #b88b2e; }

    /* Metric Grid Styling (Applies only to metric cards) */
    .metric-grid {
        display: grid;
        gap: 1.5rem; /* Matches gap-6 */
        max-width: 100%;
        overflow-x: auto; /* Allows horizontal scrolling if needed */
    }

    .card {
        overflow: hidden;
        min-width: 0;
        flex-shrink: 0; /* Prevents cards from shrinking too much */
    }

    .card p {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    /* Responsive adjustments for metric cards only */
    @media (max-width: 768px) { /* md breakpoint */
        .metric-grid {
            grid-template-columns: repeat(3, minmax(0, 1fr)); /* 3 cards on medium screens */
        }
    }

    @media (max-width: 640px) { /* sm breakpoint */
        .metric-grid {
            grid-template-columns: 1fr; /* Stack cards on small screens */
        }
    }
</style>