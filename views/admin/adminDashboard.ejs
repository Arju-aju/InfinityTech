<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard - InfinityTech</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.42.0/apexcharts.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <style>
    :root {
      --primary-dark: #1e293b;
      --secondary-dark: #0f172a;
      --accent-blue: #3b82f6;
      --accent-gradient: linear-gradient(135deg, #3b82f6, #8b5cf6);
      --text-primary: #f1f5f9;
      --text-secondary: #94a3b8;
      --sidebar-width: 280px;
    }

    body {
      background: linear-gradient(135deg, var(--secondary-dark), var(--primary-dark));
      color: var(--text-primary);
      font-family: 'Inter', sans-serif;
      margin: 0;
      overflow-x: hidden;
    }

    .container {
      max-width: 1500px;
      margin: 0 auto;
      padding: 2rem;
    }

    .metric-card {
      background: rgba(30, 41, 59, 0.8);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 16px;
      padding: 1.5rem;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .metric-card::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: var(--accent-gradient);
      opacity: 0;
      transition: all 0.5s ease;
      transform: rotate(30deg);
    }

    .metric-card:hover::before {
      opacity: 0.1;
    }

    .metric-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 30px rgba(59, 130, 246, 0.2);
    }

    .chart-container {
      background: rgba(30, 41, 59, 0.8);
      backdrop-filter: blur(10px);
      border-radius: 16px;
      padding: 2rem;
      transition: all 0.3s ease;
    }

    .grid-container {
      display: grid;
      gap: 2rem;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    }

    .chart-grid {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
    }

    .dashboard-header {
      background: var(--accent-gradient);
      padding: 2rem;
      border-radius: 16px;
      margin-bottom: 2rem;
      position: relative;
      overflow: hidden;
    }

    .dashboard-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320"%3E%3Cpath fill="rgba(255,255,255,0.1)" fill-opacity="1" d="M0,96L48,112C96,128,192,160,288,160C384,160,480,128,576,112C672,96,768,96,864,112C960,128,1056,160,1152,160C1248,160,1344,128,1392,112L1440,96L1440,0L1392,0C1344,0,1248,0,1152,0C1056,0,960,0,864,0C768,0,672,0,576,0C480,0,384,0,288,0C192,0,96,0,48,0L0,0Z"%3E%3C/path%3E%3C/svg%3E');
      background-size: cover;
    }

    .fade-in-up {
      animation: fadeInUp 0.8s ease-out forwards;
    }

    @keyframes fadeInUp {
      from { opacity: 0; transform: translateY(30px); }
      to { opacity: 1; transform: translateY(0); }
    }

    button {
      background: var(--accent-gradient);
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      transition: all 0.3s ease;
    }

    button:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(59, 130, 246, 0.4);
    }

    .table-container {
      overflow-x: auto;
      background: rgba(30, 41, 59, 0.8);
      border-radius: 16px;
      padding: 1.5rem;
    }

    .table-row:hover {
      background: rgba(59, 130, 246, 0.1);
    }

    @media (max-width: 1024px) {
      .chart-grid {
        grid-template-columns: 1fr;
      }
    }

    @media (max-width: 768px) {
      .grid-container {
        grid-template-columns: 1fr;
      }
      .sidebar {
        width: 100%;
        height: auto;
        position: relative;
      }
      .main-content {
        margin-left: 0;
      }
    }
  </style>
</head>
<body class="min-h-screen">
  <div class="layout flex">
    <div class="sidebar fixed top-0 left-0 h-full" style="width: var(--sidebar-width);">
      <%- include('./partials/adminSidebar.ejs') %>
    </div>
    <div class="main-content flex-1" style="margin-left: var(--sidebar-width);">
      <div class="container">
        <div class="dashboard-header fade-in-up">
          <h1 class="text-4xl font-bold text-white relative z-10">Dashboard Overview</h1>
          <p class="text-white/80 mt-2 relative z-10">Comprehensive analytics for InfinityTech</p>
        </div>

        <div class="grid-container fade-in-up">
          <div class="metric-card">
            <div class="flex items-center gap-4">
              <div class="icon-container bg-blue-500/20 p-3 rounded-xl">
                <i class="fas fa-users text-blue-400 text-2xl"></i>
              </div>
              <div>
                <p class="text-secondary text-sm">Active Users</p>
                <p class="text-3xl font-bold"><%= userCount %></p>
              </div>
            </div>
          </div>
          <div class="metric-card">
            <div class="flex items-center gap-4">
              <div class="icon-container bg-green-500/20 p-3 rounded-xl">
                <i class="fas fa-shopping-cart text-green-400 text-2xl"></i>
              </div>
              <div>
                <p class="text-secondary text-sm">Total Orders</p>
                <p class="text-3xl font-bold"><%= totalOrders %></p>
              </div>
            </div>
          </div>
          <div class="metric-card">
            <div class="flex items-center gap-4">
              <div class="icon-container bg-purple-500/20 p-3 rounded-xl">
                <i class="fas fa-coins text-purple-400 text-2xl"></i>
              </div>
              <div>
                <p class="text-secondary text-sm">Total Sales</p>
                <p class="text-3xl font-bold">₹<%= totalSales.toFixed(2) %></p>
              </div>
            </div>
          </div>
          <div class="metric-card">
            <div class="flex items-center gap-4">
              <div class="icon-container bg-yellow-500/20 p-3 rounded-xl">
                <i class="fas fa-ticket-alt text-yellow-400 text-2xl"></i>
              </div>
              <div>
                <p class="text-secondary text-sm">Active Coupons</p>
                <p class="text-3xl font-bold" id="activeCoupons">0</p>
              </div>
            </div>
          </div>
        </div>

        <div class="sales-report-section mt-8 fade-in-up">
          <div class="chart-container">
            <div class="flex flex-col md:flex-row justify-between items-center mb-6 gap-4">
              <h2 class="text-2xl font-bold">Sales Report</h2>
              <div class="flex flex-wrap gap-4 items-center">
                <input type="date" id="startDate" class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 outline-none">
                <span class="text-gray-400">to</span>
                <input type="date" id="endDate" class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 outline-none">
                <select id="timeFrame" class="bg-gray-700 text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 outline-none">
                  <option value="daily">Daily</option>
                  <option value="weekly">Weekly</option>
                  <option value="monthly" selected>Monthly</option>
                  <option value="yearly">Yearly</option>
                </select>
                <button id="applyFilterButton" class="text-white">Apply Filter</button>
                <button id="downloadReport" class="text-white flex items-center gap-2">
                  <i class="fas fa-download"></i> Download Report
                </button>
              </div>
            </div>

            <div class="grid-container mb-6">
              <div class="metric-card">
                <p class="text-secondary text-sm">Total Sales</p>
                <p class="text-2xl font-bold" id="totalSales">₹0</p>
              </div>
              <div class="metric-card">
                <p class="text-secondary text-sm">Total Orders</p>
                <p class="text-2xl font-bold" id="totalOrders">0</p>
              </div>
              <div class="metric-card">
                <p class="text-secondary text-sm">Avg. Order Value</p>
                <p class="text-2xl font-bold" id="avgOrderValue">₹0</p>
              </div>
              <div class="metric-card">
                <p class="text-secondary text-sm">Total Items Sold</p>
                <p class="text-2xl font-bold" id="totalItems">0</p>
              </div>
              <div class="metric-card">
                <p class="text-secondary text-sm">Coupons Used</p>
                <p class="text-2xl font-bold" id="totalCouponsUsed">0</p>
              </div>
              <div class="metric-card">
                <p class="text-secondary text-sm">Coupon Deductions</p>
                <p class="text-2xl font-bold" id="couponDeductions">₹0</p>
              </div>
            </div>

            <div class="chart-grid">
              <div class="chart-container" style="min-height: 400px;">
                <canvas id="salesChart"></canvas>
              </div>
              <div class="chart-container" style="min-height: 400px;">
                <canvas id="paymentMethodChart"></canvas>
              </div>
            </div>
          </div>

          <div class="table-container mt-6">
            <table class="w-full" id="salesTable">
              <thead>
                <tr class="text-gray-400 text-sm uppercase">
                  <th class="py-3 px-4 text-left">Date</th>
                  <th class="py-3 px-4 text-left">Orders</th>
                  <th class="py-3 px-4 text-left">Sales</th>
                  <th class="py-3 px-4 text-left">Items Sold</th>
                  <th class="py-3 px-4 text-left">Coupons Used</th>
                </tr>
              </thead>
              <tbody id="salesTableBody"></tbody>
            </table>
          </div>
        </div>

        <div class="returns-section mt-8 fade-in-up">
          <div class="chart-container">
            <h3 class="text-lg font-bold mb-4">Returns Overview</h3>
            <canvas id="returnsChart" style="max-height: 300px;"></canvas>
          </div>
        </div>

        <div class="top-sellers-section mt-8 fade-in-up">
          <div class="grid-container">
            <div class="chart-container">
              <h3 class="text-lg font-bold mb-4">Top Products</h3>
              <div id="topProductsList" class="space-y-3"></div>
            </div>
            <div class="chart-container">
              <h3 class="text-lg font-bold mb-4">Top Categories</h3>
              <div id="topCategoriesList" class="space-y-3"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="downloadModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden flex items-center justify-center">
    <div class="bg-gray-900 rounded-xl p-6 max-w-md w-full mx-4 transform transition-all duration-300 scale-95 opacity-0" id="modalContent">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-xl font-bold text-white">Download Sales Report</h3>
        <button onclick="closeModal()" class="text-gray-400 hover:text-white transition-colors">
          <i class="fas fa-times text-lg"></i>
        </button>
      </div>
      <p class="text-gray-400 mb-6">Choose your preferred format to download the sales report:</p>
      <div class="grid grid-cols-2 gap-4 mb-6">
        <button onclick="handleDownload('pdf')" class="format-button bg-gray-800 hover:bg-gray-700 p-4 rounded-lg transition-all duration-300 group" id="pdfButton">
          <div class="flex flex-col items-center">
            <div class="w-12 h-12 bg-red-500/20 rounded-full flex items-center justify-center mb-3 group-hover:scale-110 transition-transform">
              <i class="fas fa-file-pdf text-red-500 text-xl"></i>
            </div>
            <span class="text-white font-medium">PDF Format</span>
            <span class="text-gray-400 text-sm">Download as PDF file</span>
          </div>
          <div class="download-progress hidden h-1 bg-red-500 mt-3 rounded-full"></div>
        </button>
        <button onclick="handleDownload('excel')" class="format-button bg-gray-800 hover:bg-gray-700 p-4 rounded-lg transition-all duration-300 group" id="excelButton">
          <div class="flex flex-col items-center">
            <div class="w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center mb-3 group-hover:scale-110 transition-transform">
              <i class="fas fa-file-excel text-green-500 text-xl"></i>
            </div>
            <span class="text-white font-medium">Excel Format</span>
            <span class="text-gray-400 text-sm">Download as Excel file</span>
          </div>
          <div class="download-progress hidden h-1 bg-green-500 mt-3 rounded-full"></div>
        </button>
      </div>
    </div>
  </div>

  <%- include('./partials/adminFooter.ejs') %>

  <script>
    const initialSales = <%- initialSales %>;
    const couponStats = JSON.parse('<%- couponStats %>');
    const returnStats = <%- returnStats %>;

    document.addEventListener('DOMContentLoaded', function() {
      const startDateInput = document.getElementById('startDate');
      const endDateInput = document.getElementById('endDate');
      const today = new Date();
      endDateInput.value = today.toISOString().split('T')[0];
      startDateInput.value = new Date(today.setMonth(today.getMonth() - 1)).toISOString().split('T')[0];

      loadInitialData();
      fetchSalesReport();
      fetchTopSellers();
      renderReturnsChart();
    });

    function loadInitialData() {
      console.log("Frontend couponStats:", couponStats); // Debug log
      const summary = initialSales.reduce((acc, curr) => ({
        totalSales: acc.totalSales + curr.sales,
        totalOrders: acc.totalOrders + curr.orders,
        totalItems: acc.totalItems + curr.totalItems,
        totalCouponsUsed: acc.totalCouponsUsed + curr.totalCouponsUsed,
        couponDeductions: acc.couponDeductions + curr.couponDeductions
      }), { totalSales: 0, totalOrders: 0, totalItems: 0, totalCouponsUsed: 0, couponDeductions: 0 });

      document.getElementById('totalSales').textContent = `₹${summary.totalSales.toFixed(2)}`;
      document.getElementById('totalOrders').textContent = summary.totalOrders;
      document.getElementById('avgOrderValue').textContent = `₹${(summary.totalSales / summary.totalOrders || 0).toFixed(2)}`;
      document.getElementById('totalItems').textContent = summary.totalItems;
      document.getElementById('totalCouponsUsed').textContent = summary.totalCouponsUsed;
      document.getElementById('couponDeductions').textContent = `₹${summary.couponDeductions.toFixed(2)}`;
      document.getElementById('activeCoupons').textContent = couponStats.activeCoupons || 0;

      updateSalesChart(initialSales);
      updateSalesTable(initialSales);
    }

    async function fetchSalesReport() {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      const timeFrame = document.getElementById('timeFrame').value;
      try {
        const response = await fetch(`/admin/sales-report?startDate=${startDate}&endDate=${endDate}&timeFrame=${timeFrame}`);
        if (!response.ok) throw new Error('Network response was not ok');
        const result = await response.json();
        if (result.success) {
          updateDashboard(result.data);
          updateSalesChart(result.data.salesData);
          updateSalesTable(result.data.salesData);
          renderPaymentMethodChart(result.data.paymentMethodStats);
        } else {
          console.error('Failed to fetch sales report:', result.message);
        }
      } catch (error) {
        console.error('Error fetching sales report:', error);
      }
    }

    function updateDashboard(data) {
      const summary = data.summary;
      document.getElementById('totalSales').textContent = `₹${summary.totalSales.toFixed(2)}`;
      document.getElementById('totalOrders').textContent = summary.totalOrders;
      document.getElementById('avgOrderValue').textContent = `₹${summary.avgOrderValue.toFixed(2)}`;
      document.getElementById('totalItems').textContent = summary.totalItems;
      document.getElementById('totalCouponsUsed').textContent = summary.totalCouponsUsed;
      document.getElementById('couponDeductions').textContent = `₹${summary.couponDeductions.toFixed(2)}`;
    }

    let salesChart;
    function updateSalesChart(data) {
      const ctx = document.getElementById('salesChart').getContext('2d');
      const labels = data.map(item => item.date);
      const sales = data.map(item => item.sales);

      if (salesChart) salesChart.destroy();
      salesChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'Sales',
            data: sales,
            backgroundColor: 'rgba(59, 130, 246, 0.3)',
            borderColor: '#3b82f6',
            borderWidth: 3,
            pointBackgroundColor: '#fff',
            pointBorderColor: '#3b82f6',
            pointBorderWidth: 2,
            pointRadius: 5,
            pointHoverRadius: 7,
            tension: 0.4,
            fill: true
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              labels: { color: '#fff', font: { size: 14 } }
            },
            tooltip: {
              backgroundColor: 'rgba(0, 0, 0, 0.8)',
              titleFont: { size: 14 },
              bodyFont: { size: 12 },
              callbacks: {
                label: (context) => `₹${context.parsed.y.toFixed(2)}`
              }
            }
          },
          scales: {
            x: {
              title: { color: '#fff', display: true, text: 'Date', font: { size: 14 } },
              grid: { color: 'rgba(255, 255, 255, 0.1)' },
              ticks: { color: '#fff' }
            },
            y: {
              title: { color: '#fff', display: true, text: 'Sales (₹)', font: { size: 14 } },
              grid: { color: 'rgba(255, 255, 255, 0.1)' },
              ticks: { color: '#fff', callback: (value) => `₹${value}` }
            }
          }
        }
      });
    }

    function updateSalesTable(data) {
      const salesTableBody = document.getElementById('salesTableBody');
      salesTableBody.innerHTML = '';
      data.forEach(item => {
        const row = document.createElement('tr');
        row.classList.add('table-row');
        row.innerHTML = `
          <td class="py-3 px-4">${item.date}</td>
          <td class="py-3 px-4">${item.orders}</td>
          <td class="py-3 px-4">₹${item.sales.toFixed(2)}</td>
          <td class="py-3 px-4">${item.totalItems}</td>
          <td class="py-3 px-4">${item.totalCouponsUsed}</td>
        `;
        salesTableBody.appendChild(row);
      });
    }

    function renderPaymentMethodChart(paymentMethodStats) {
      const ctx = document.getElementById('paymentMethodChart').getContext('2d');
      const labels = paymentMethodStats.map(stat => stat._id);
      const values = paymentMethodStats.map(stat => stat.count);

      new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: labels,
          datasets: [{
            label: 'Payment Methods',
            data: values,
            backgroundColor: ['#3b82f6', '#facc15', '#10b981'],
            borderColor: ['#fff', '#fff', '#fff'],
            borderWidth: 2
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { position: 'top', labels: { color: '#fff', font: { size: 14 } } },
            tooltip: {
              backgroundColor: 'rgba(0, 0, 0, 0.8)',
              callbacks: {
                label: function(context) {
                  const total = values.reduce((a, b) => a + b, 0);
                  const percentage = ((context.raw / total) * 100).toFixed(2);
                  return `${context.label}: ${context.raw} (${percentage}%)`;
                }
              }
            }
          }
        }
      });
    }

    function renderReturnsChart() {
      const ctx = document.getElementById('returnsChart').getContext('2d');
      const labels = returnStats.map(stat => stat._id);
      const values = returnStats.map(stat => stat.count);

      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Returns',
            data: values,
            backgroundColor: ['#ef4444', '#3b82f6', '#facc15'],
            borderColor: ['#fff', '#fff', '#fff'],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { labels: { color: '#fff', font: { size: 14 } } }
          },
          scales: {
            y: { 
              beginAtZero: true, 
              title: { display: true, text: 'Count', color: '#fff', font: { size: 14 } },
              grid: { color: 'rgba(255, 255, 255, 0.1)' },
              ticks: { color: '#fff' }
            },
            x: { 
              title: { display: true, text: 'Status', color: '#fff', font: { size: 14 } },
              grid: { color: 'rgba(255, 255, 255, 0.1)' },
              ticks: { color: '#fff' }
            }
          }
        }
      });
    }

    async function fetchTopSellers() {
      try {
        const response = await fetch('/admin/top-sellers');
        if (!response.ok) throw new Error('Network response was not ok');
        const data = await response.json();
        if (data.success) {
          const maxProductValue = Math.max(...data.products.map(p => p.value));
          document.getElementById('topProductsList').innerHTML = data.products.map((product, index) => 
            `<div class="flex items-center justify-between">
              <span>${index + 1}. ${product.name}</span>
              <span>₹${product.value.toFixed(2)}</span>
            </div>`
          ).join('');

          const maxCategoryValue = Math.max(...data.categories.map(c => c.value));
          document.getElementById('topCategoriesList').innerHTML = data.categories.map((category, index) => 
            `<div class="flex items-center justify-between">
              <span>${index + 1}. ${category.name}</span>
              <span>${category.value} items</span>
            </div>`
          ).join('');
        }
      } catch (error) {
        console.error('Error fetching top sellers:', error);
      }
    }

    document.getElementById('applyFilterButton').addEventListener('click', fetchSalesReport);

    async function downloadPDF() {
      try {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        doc.setFontSize(16);
        doc.text("Sales Report - InfinityTech", 14, 10);
        doc.setFontSize(10);
        const data = await fetchSalesDataForDownload();
        const headers = [["Date", "Orders", "Sales (₹)", "Items Sold", "Coupons Used", "Coupon Deductions"]];
        const rows = data.map(item => [
          item.date,
          item.orders,
          item.sales.toFixed(2),
          item.totalItems,
          item.totalCouponsUsed,
          item.couponDeductions.toFixed(2)
        ]);
        doc.autoTable({
          head: headers,
          body: rows,
          startY: 20,
          theme: 'striped',
          headStyles: { fillColor: [59, 130, 246], textColor: [255, 255, 255] },
          styles: { textColor: [0, 0, 0] }
        });
        doc.save("Sales_Report.pdf");
      } catch (error) {
        console.error('Error generating PDF:', error);
      }
    }

    async function downloadExcel() {
      try {
        const data = await fetchSalesDataForDownload();
        const worksheetData = [["Date", "Orders", "Sales (₹)", "Items Sold", "Coupons Used", "Coupon Deductions"]];
        data.forEach(item => worksheetData.push([
          item.date,
          item.orders,
          item.sales.toFixed(2),
          item.totalItems,
          item.totalCouponsUsed,
          item.couponDeductions.toFixed(2)
        ]));
        const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.aoa_to_sheet(worksheetData);
        XLSX.utils.book_append_sheet(wb, ws, "Sales Report");
        XLSX.writeFile(wb, "Sales_Report.xlsx");
      } catch (error) {
        console.error('Error generating Excel:', error);
      }
    }

    async function fetchSalesDataForDownload() {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      const timeFrame = document.getElementById('timeFrame').value;
      const response = await fetch(`/admin/sales-report?startDate=${startDate}&endDate=${endDate}&timeFrame=${timeFrame}`);
      if (!response.ok) throw new Error('Failed to fetch sales data');
      const result = await response.json();
      if (!result.success) throw new Error(result.message || 'Error in sales data');
      return result.data.salesData;
    }

    function openModal() {
      const modal = document.getElementById('downloadModal');
      const modalContent = document.getElementById('modalContent');
      modal.classList.remove('hidden');
      modal.classList.add('show');
      modalContent.classList.remove('scale-95', 'opacity-0');
      modalContent.classList.add('scale-100', 'opacity-100');
    }

    function closeModal() {
      const modal = document.getElementById('downloadModal');
      const modalContent = document.getElementById('modalContent');
      modalContent.classList.remove('scale-100', 'opacity-100');
      modalContent.classList.add('scale-95', 'opacity-0');
      setTimeout(() => {
        modal.classList.remove('show');
        modal.classList.add('hidden');
      }, 300);
    }

    async function handleDownload(format) {
      const button = document.getElementById(`${format}Button`);
      const progressBar = button.querySelector('.download-progress');
      document.querySelectorAll('.format-button').forEach(btn => btn.disabled = true);
      progressBar.classList.remove('hidden');
      progressBar.style.width = '0%';
      setTimeout(() => progressBar.style.width = '100%', 100);

      try {
        if (format === 'pdf') await downloadPDF();
        else if (format === 'excel') await downloadExcel();
        setTimeout(() => {
          closeModal();
          document.querySelectorAll('.format-button').forEach(btn => {
            btn.disabled = false;
            btn.querySelector('.download-progress').classList.add('hidden');
          });
        }, 1000);
      } catch (error) {
        console.error(`Error downloading ${format}:`, error);
        alert(`Failed to download ${format.toUpperCase()} report. Please try again.`);
        document.querySelectorAll('.format-button').forEach(btn => {
          btn.disabled = false;
          btn.querySelector('.download-progress').classList.add('hidden');
        });
      }
    }

    document.getElementById("downloadReport").addEventListener("click", openModal);
  </script>
</body>
</html>