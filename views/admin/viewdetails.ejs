<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>InfinityTech Admin - Order Details</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --sidebar-width: 16rem;
            --primary-bg: #1e1e2f;
            --secondary-bg: #2a2438;
            --content-bg: #2d2d44;
            --accent-start: #d4af37;
            --accent-end: #f9e076;
            --text-color: #ffffff; /* Changed to pure white */
        }
        .gradient-bg { @apply bg-gradient-to-br from-[var(--primary-bg)] to-[var(--secondary-bg)] !important; }
        .glass-effect-dark { @apply bg-[var(--content-bg)]/80 backdrop-blur-md border border-white/10; }
        .golden-button { @apply bg-gradient-to-r from-[var(--accent-start)] to-[var(--accent-end)] text-white px-4 py-2 rounded-lg shadow-lg hover:scale-105 transition-all duration-300; }
        body { @apply font-sans text-[var(--text-color)] min-h-screen m-0 p-0 bg-[var(--primary-bg)] !important; }
        @keyframes gradientAnimation { 0% { background-position: 0% 0%; } 50% { background-position: 100% 100%; } 100% { background-position: 0% 0%; } }
        .animate-gradient { background-size: 200% 200%; animation: gradientAnimation 15s ease infinite; }
        @keyframes fadeInUp { from { opacity: 0; transform: translateY(30px); } to { opacity: 1; transform: translateY(0); } }
        .animate-fade-in-up { animation: fadeInUp 0.8s ease-out forwards; }
        .animation-delay-200 { animation-delay: 0.2s; }
        .animation-delay-400 { animation-delay: 0.4s; }
        main { margin-left: var(--sidebar-width); width: calc(100% - var(--sidebar-width)); min-height: 100vh; }
        .sidebar { position: fixed; top: 0; left: 0; width: var(--sidebar-width); z-index: 100; animation: slideIn 0.5s ease-out forwards; }
        @keyframes slideIn { from { transform: translateX(-100%); } to { transform: translateX(0); } }
        .table-bordered { border: 1px solid rgba(255, 255, 255, 0.1); }
        .table-bordered-item { border-bottom: 1px solid rgba(255, 255, 255, 0.1); }
        .text-gray-400 { color: #ffffff !important; }
        .text-gray-300 { color: #ffffff !important; }
    </style>
</head>
<body class="gradient-bg animate-gradient" style="background: linear-gradient(to bottom right, #1e1e2f, #2a2438) !important;">
    <div class="sidebar fixed top-0 left-0 h-full w-64 md:w-[var(--sidebar-width)] bg-[var(--primary-bg)] z-50 transition-transform duration-300 md:translate-x-0 -translate-x-full shadow-lg">
        <div class="flex flex-col h-full text-[var(--text-color)]">
            <div class="flex items-center justify-start p-6 border-b border-white/10">
                <span class="text-3xl font-extrabold bg-gradient-to-r from-[#d4af37] to-[#f9e076] bg-clip-text text-transparent tracking-tight ">InfinityTech</span>
            </div>
            
            <nav class="flex-1 space-y-2 p-4 overflow-y-auto">
                <% const navItems = [
                    { href: '/admin/dashboard', icon: 'fa-home', label: 'Dashboard', active: (typeof path !== 'undefined' && path === '/admin/dashboard') },
                    { href: '/admin/products', icon: 'fa-box', label: 'Products', active: (typeof path !== 'undefined' && path.includes('/admin/product')) },
                    { href: '/admin/categories', icon: 'fa-tags', label: 'Categories', active: (typeof path !== 'undefined' && path.includes('/admin/categor')) },
                    { href: '/admin/users', icon: 'fa-users', label: 'Customers', active: (typeof path !== 'undefined' && path === '/admin/users') },
                    { href: '/admin/orders', icon: 'fa-shopping-bag', label: 'Orders', active: (typeof path !== 'undefined' && path === '/admin/orders') },
                    { href: '/admin/return/requests', icon: 'fa-undo', label: 'Return Orders', active: (typeof path !== 'undefined' && path === '/admin/return/requests') },
                    { href: '/admin/offers', icon: 'fa-percentage', label: 'Offer', active: (typeof path !== 'undefined' && path === '/admin/offers') },
                    { href: '/admin/coupons', icon: 'fa-ticket-alt', label: 'Coupon', active: (typeof path !== 'undefined' && path === '/admin/coupons') },
                    { href: '/admin/logout', icon: 'fa-sign-out-alt', label: 'Logout', active: (typeof path !== 'undefined' && path === '/admin/logout') }
                ]; %>
                <% navItems.forEach(item => { %>
                    <a href="<%= item.href %>" class="flex items-center py-2.5 px-4 rounded transition duration-300 group <%= item.active ? 'gradient-accent text-white scale-105' : 'text-[var(--text-color)] hover:bg-[var(--secondary-bg)] hover:text-white hover:scale-105' %>">
                        <i class="fas <%= item.icon %> w-6 transition-transform duration-300 group-hover:rotate-12"></i>
                        <span class="ml-3"><%= item.label %></span>
                    </a>
                <% }); %>
            </nav>
        </div>
    </div>

    <main class="flex-1 p-6 overflow-y-auto">
        <div class="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            <div class="glass-effect-dark rounded-xl p-6 space-y-6 animate-fade-in-up">
                <div class="flex justify-between items-center mb-6">
                    <h1 class="text-4xl font-extrabold bg-gradient-to-r from-[#d4af37] to-[#f9e076] bg-clip-text text-transparent tracking-tight">Order Details</h1>
                    <a href="/admin/orders" class="text-[var(--accent-start)] hover:text-[var(--accent-end)] transition-colors flex items-center">
                        <i class="fas fa-arrow-left mr-2"></i>Back to Orders
                    </a>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-6 animate-fade-in-up animation-delay-200">
                    <div class="glass-effect-dark rounded-lg p-4 table-bordered">
                        <h2 class="text-lg font-semibold text-[var(--text-color)] mb-4">Order Information</h2>
                        <div class="space-y-2">
                            <div class="flex justify-between table-bordered-item py-2">
                                <span class="text-gray-400">Order ID</span>
                                <span class="text-[var(--text-color)]"><%= order._id %></span>
                            </div>
                            <div class="flex justify-between table-bordered-item py-2">
                                <span class="text-gray-400">Date</span>
                                <span class="text-[var(--text-color)]"><%= order.formattedDate %></span>
                            </div>
                            <div class="flex justify-between py-2">
                                <span class="text-gray-400">Status</span>
                                <span class="px-2 py-1 rounded text-sm <%= order.status === 'Pending' ? 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/20' : order.status === 'Delivered' ? 'bg-green-500/20 text-green-400 border border-green-500/20' : 'bg-[var(--accent-start)]/20 text-[var(--accent-start)] border border-[var(--accent-start)]/20' %>">
                                    <%= order.status %>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="glass-effect-dark rounded-lg p-4 table-bordered">
                        <h2 class="text-lg font-semibold text-[var(--text-color)] mb-4">Customer Information</h2>
                        <div class="space-y-2">
                            <div class="flex justify-between table-bordered-item py-2">
                                <span class="text-gray-400">Name</span>
                                <span class="text-[var(--text-color)]"><%= order.user.name %></span>
                            </div>
                            <div class="flex justify-between py-2">
                                <span class="text-gray-400">Email</span>
                                <span class="text-[var(--text-color)]"><%= order.user.email %></span>
                            </div>
                        </div>
                    </div>
                    <div class="glass-effect-dark rounded-lg p-4 table-bordered">
                        <h2 class="text-lg font-semibold text-[var(--text-color)] mb-4">Shipping Address</h2>
                        <p class="text-sm text-gray-300">
                            <%= order.deliveryAddress.name %>,
                            <%= order.deliveryAddress.street %>,
                            <%= order.deliveryAddress.city %>,
                            <%= order.deliveryAddress.state %> - 
                            <%= order.deliveryAddress.pincode %>
                        </p>
                    </div>
                </div>

                <div class="glass-effect-dark rounded-lg p-4 animate-fade-in-up animation-delay-400 table-bordered">
                    <h2 class="text-lg font-semibold text-[var(--text-color)] mb-4">Order Items</h2>
                    <div class="space-y-4">
                        <% order.products.forEach((product, index) => { %>
                            <div class="flex items-center justify-between bg-[var(--secondary-bg)] p-4 rounded-lg table-bordered-item">
                                <div class="flex items-center space-x-4">
                                    <% const productImage = product.productId && product.productId.images && product.productId.images.length > 0 ? 
                                        product.productId.images[0] : '/default-image.jpg' %>
                                    <img src="<%= productImage %>" 
                                         alt="Product Image" 
                                         class="object-cover h-24 w-24 rounded border border-white/10">
                                    <div>
                                        <h3 class="font-medium text-[var(--text-color)]">
                                            <%= product.productId ? product.productId.name : 'Product Not Available' %>
                                        </h3>
                                        <p class="text-sm text-gray-400">Quantity: <%= product.quantity %></p>
                                        <p class="text-sm text-gray-400">Status: <%= product.status %></p>
                                    </div>
                                </div>
                                <div class="text-right">
                                    <% if (product.productId) { %>
                                        <p class="font-medium text-[var(--accent-start)]">₹<%= product.productId.price %></p>
                                        <p class="text-sm text-gray-400">
                                            Total: ₹<%= (product.productId.price * product.quantity).toFixed(2) %>
                                        </p>
                                        <% if (product.status === 'Return Requested') { %>
                                            <button class="approve-return-btn golden-button mt-2" 
                                                    data-order-id="<%= order._id %>" 
                                                    data-product-index="<%= index %>">
                                                Approve Return
                                            </button>
                                        <% } %>
                                    <% } else { %>
                                        <p class="font-medium text-gray-400">Price not available</p>
                                    <% } %>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>

                <div class="flex justify-end animate-fade-in-up animation-delay-400">
                    <div class="glass-effect-dark rounded-lg p-4 w-full md:w-72 table-bordered">
                        <h2 class="text-lg font-semibold text-[var(--text-color)] mb-4">Order Summary</h2>
                        <div class="space-y-2">
                            <div class="flex justify-between table-bordered-item py-2">
                                <span class="text-gray-400">Subtotal</span>
                                <span class="text-[var(--text-color)]">₹<%= order.products.reduce((sum, p) => sum + (p.totalPrice || 0), 0).toFixed(2) %></span>
                            </div>
                            <div class="flex justify-between table-bordered-item py-2">
                                <span class="text-gray-400">Shipping</span>
                                <span class="text-[var(--text-color)]">₹<%= order.shippingCharge.toFixed(2) %></span>
                            </div>
                            <div class="flex justify-between table-bordered-item py-2">
                                <span class="text-gray-400">Coupon Discount</span>
                                <span class="text-[var(--text-color)]">-₹<%= order.couponDiscount.toFixed(2) %></span>
                            </div>
                            <div class="border-t border-white/10 my-2 pt-2 flex justify-between font-semibold">
                                <span class="text-[var(--text-color)]">Total</span>
                                <span class="text-[var(--text-color)]">₹<%= order.orderAmount.toFixed(2) %></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const sidebar = document.querySelector('.sidebar');
            const updateHeight = () => {
                const main = document.querySelector('main');
                const mainHeight = main.offsetHeight;
                sidebar.style.height = `${Math.max(mainHeight, window.innerHeight)}px`;
            };
            updateHeight();
            window.addEventListener('resize', updateHeight);

            document.querySelectorAll('.approve-return-btn').forEach(btn => {
                btn.addEventListener('click', async () => {
                    const orderId = btn.dataset.orderId;
                    const productIndex = btn.dataset.productIndex;

                    const result = await Swal.fire({
                        title: 'Approve Return',
                        text: 'This will refund the proportional amount to the customer’s wallet!',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d4af37',
                        cancelButtonColor: '#6b7280',
                        confirmButtonText: 'Yes, Approve Return'
                    });

                    if (result.isConfirmed) {
                        try {
                            const response = await fetch(`/admin/orders/${orderId}/approve-return`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ productIndex })
                            });
                            const data = await response.json();
                            if (data.success) {
                                Swal.fire('Approved!', 'Return approved and amount refunded to wallet.', 'success').then(() => window.location.reload());
                            } else {
                                throw new Error(data.message || 'Return approval failed');
                            }
                        } catch (error) {
                            Swal.fire('Error', error.message, 'error');
                        }
                    }
                });
            });
        });
    </script>
</body>
</html>