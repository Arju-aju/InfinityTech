<!DOCTYPE html>
<html lang="en" class="dark">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>InfinityTech Admin - Return Request Details</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

  <style>
    :root {
      --primary-bg: #1e1e2f;
      --secondary-bg: #2a2438;
      --content-bg: #2d2d44;
      --accent-start: #d4af37;
      --accent-end: #f9e076;
      --text-color: #e5e7eb;
    }

    .gradient-bg {
      @apply bg-gradient-to-br from-[var(--primary-bg)] to-[var(--secondary-bg)] !important;
    }

    .glass-effect-dark {
      @apply bg-[var(--content-bg)]/80 backdrop-blur-md border border-white/10;
    }

    .golden-button {
      @apply bg-gradient-to-r from-[var(--accent-start)] to-[var(--accent-end)] text-white py-2 px-4 rounded-lg shadow-lg hover:scale-105 transition-all duration-300;
    }

    body {
      @apply font-sans text-[var(--text-color)] min-h-screen m-0 p-0 bg-[var(--primary-bg)] !important;
    }

    @keyframes gradientAnimation {
      0% { background-position: 0% 0%; }
      50% { background-position: 100% 100%; }
      100% { background-position: 0% 0%; }
    }
    .animate-gradient {
      background-size: 200% 200%;
      animation: gradientAnimation 15s ease infinite;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    .animate-fade-in {
      animation: fadeIn 0.5s ease-out forwards;
    }

    .status-badge {
      @apply px-4 py-2 rounded-full text-sm font-medium;
    }
    .status-pending { @apply bg-yellow-500/20 text-yellow-400 border border-yellow-500/20; }
    .status-approved { @apply bg-green-500/20 text-green-400 border border-green-500/20; }
    .status-rejected { @apply bg-red-500/20 text-red-400 border border-red-500/20; }

    .timeline-dot {
      @apply absolute left-0 top-1 w-4 h-4 rounded-full border-2 border-[var(--primary-bg)];
    }
  </style>
</head>

<body class="gradient-bg animate-gradient" style="background: linear-gradient(to bottom right, #1e1e2f, #2a2438) !important;">
  <div class="modal-overlay fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 animate-fade-in">
    <div class="modal-content glass-effect-dark rounded-xl w-full max-w-6xl max-h-[90vh] overflow-hidden flex flex-col">
      <!-- Modal Header -->
      <div class="p-6 border-b border-white/10 flex justify-between items-center">
        <div>
          <h2 class="text-2xl font-bold text-[var(--text-color)]">Return Request #<%= returnRequest._id.toString().substring(0, 8) %></h2>
          <p class="text-gray-400 mt-1">Submitted on <%= formatDate(returnRequest.orderId?.createdAt || new Date()) %></p>
        </div>
        <div class="flex items-center gap-4">
          <span class="status-badge <%= getStatusColor(returnRequest.returnStatus) %>">
            <%= returnRequest.returnStatus %>
          </span>
          <a href="/admin/return/requests" class="text-[var(--text-color)] hover:text-[var(--accent-start)] transition-colors">
            <i class="fas fa-times text-xl"></i>
          </a>
        </div>
      </div>

      <!-- Modal Body -->
      <div class="flex-1 overflow-auto">
        <div class="p-6">
          <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Left Column -->
            <div class="lg:col-span-2 space-y-6">
              <!-- Customer Information -->
              <div class="detail-section glass-effect-dark rounded-xl p-6">
                <h3 class="text-lg font-semibold text-[var(--text-color)] mb-4">Customer Information</h3>
                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <p class="text-gray-400 text-sm">Name</p>
                    <p class="text-[var(--text-color)]"><%= returnRequest.orderId?.user?.name || 'N/A' %></p>
                  </div>
                  <div>
                    <p class="text-gray-400 text-sm">Email</p>
                    <p class="text-[var(--text-color)]"><%= returnRequest.orderId?.user?.email || 'N/A' %></p>
                  </div>
                  <div>
                    <p class="text-gray-400 text-sm">Phone</p>
                    <p class="text-[var(--text-color)]"><%= returnRequest.orderId?.user?.phone || 'N/A' %></p>
                  </div>
                  <div>
                    <p class="text-gray-400 text-sm">Order ID</p>
                    <p class="text-[var(--text-color)]"><%= returnRequest.orderId?._id ? `#${returnRequest.orderId._id.toString().substring(0, 8)}` : 'N/A' %></p>
                  </div>
                </div>
              </div>

              <!-- Product Information -->
              <div class="detail-section glass-effect-dark rounded-xl p-6">
                <h3 class="text-lg font-semibold text-[var(--text-color)] mb-4">Product Details</h3>
                <div class="space-y-4">
                  <% returnRequest.items.forEach(item => { %>
                  <div class="flex gap-4 bg-[var(--secondary-bg)] p-4 rounded-lg">
                    <img src="<%= item.productDetails.image || '/images/placeholder.jpg' %>" alt="<%= item.productDetails.name %>" class="w-24 h-24 object-cover rounded-lg">
                    <div class="flex-1">
                      <div class="flex justify-between">
                        <h4 class="text-[var(--text-color)] font-medium"><%= item.productDetails.name %></h4>
                        <span class="text-[var(--accent-start)] font-semibold"><%= formatPrice(item.productDetails.price) %></span>
                      </div>
                      <p class="text-gray-400 text-sm mt-1">Quantity: <%= item.quantity %></p>
                    </div>
                  </div>
                  <% }); %>
                </div>
              </div>

              <!-- Return Details -->
              <div class="detail-section glass-effect-dark rounded-xl p-6">
                <h3 class="text-lg font-semibold text-[var(--text-color)] mb-4">Return Details</h3>
                <div class="space-y-4">
                  <div>
                    <p class="text-gray-400 text-sm">Reason for Return</p>
                    <p class="text-[var(--text-color)] mt-1"><%= returnRequest.reason %></p>
                  </div>
                  <% if (returnRequest.comments) { %>
                  <div>
                    <p class="text-gray-400 text-sm">Additional Comments</p>
                    <p class="text-[var(--text-color)] mt-1"><%= returnRequest.comments %></p>
                  </div>
                  <% } %>
                </div>
              </div>
            </div>

            <!-- Right Column -->
            <div class="space-y-6">
              <!-- Status Card -->
              <div class="detail-section glass-effect-dark rounded-xl p-6">
                <h3 class="text-lg font-semibold text-[var(--text-color)] mb-4">Return Status</h3>
                <div class="relative pl-8">
                  <div class="space-y-6">
                    <% const statuses = ['Pending', 'Approved', 'Rejected'];
                       const currentIndex = statuses.indexOf(returnRequest.returnStatus);
                    %>
                    <% statuses.forEach((status, index) => { %>
                    <div class="timeline-item relative pl-6">
                      <div class="timeline-dot <%= index <= currentIndex ? 'bg-[var(--accent-start)]' : 'bg-gray-600' %>"></div>
                      <h4 class="<%= index <= currentIndex ? 'text-[var(--accent-start)]' : 'text-gray-400' %> font-medium">
                        <%= status %>
                      </h4>
                      <% if (index <= currentIndex) { %>
                      <p class="text-gray-400 text-sm"><%= formatDate(returnRequest.orderId?.createdAt || new Date()) %></p>
                      <% } else { %>
                      <p class="text-gray-500 text-sm">Pending</p>
                      <% } %>
                    </div>
                    <% }); %>
                  </div>
                </div>
              </div>

              <!-- Action Card -->
              <div class="detail-section glass-effect-dark rounded-xl p-6">
                <h3 class="text-lg font-semibold text-[var(--text-color)] mb-4">Actions</h3>
                <div class="space-y-3">
                  <% if (returnRequest.returnStatus === 'Pending') { %>
                  <form action="/admin/return/approve/<%= returnRequest._id %>" method="POST" class="inline">
                    <button type="submit" class="w-full golden-button m-2">
                      <i class="fas fa-check mr-2"></i>Approve Return
                    </button>
                  </form>
                  <form action="/admin/return/reject/<%= returnRequest._id %>" method="POST" class="inline">
                    <button type="submit" class="w-full bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg transition-colors m-2">
                      <i class="fas fa-times mr-2"></i>Reject Return
                    </button>
                  </form>
                  <% } %>
                  <a href="mailto:<%= returnRequest.orderId?.user?.email || '' %>" class="block w-full bg-[var(--secondary-bg)] hover:bg-[var(--content-bg)] text-[var(--text-color)] py-2 px-4 rounded-lg transition-colors text-center m-2">
                    <i class="fas fa-comment mr-2"></i>Contact Customer
                  </a>
                </div>
              </div>

              <!-- Additional Info -->
              <div class="detail-section glass-effect-dark rounded-xl p-6">
                <h3 class="text-lg font-semibold text-[var(--text-color)] mb-4">Return Summary</h3>
                <div class="space-y-3">
                  <div class="flex justify-between">
                    <span class="text-gray-400">Return Amount</span>
                    <span class="text-[var(--text-color)] font-medium"><%= formatPrice(returnRequest.refundedAmount || returnRequest.items.reduce((total, item) => total + (item.productDetails.price * item.quantity), 0)) %></span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Status</span>
                    <span class="text-[var(--text-color)]"><%= returnRequest.returnStatus %></span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-400">Request Date</span>
                    <span class="text-[var(--text-color)]"><%= formatDate(returnRequest.orderId?.createdAt || new Date()) %></span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const closeBtn = document.querySelector('.modal-overlay a[href="/admin/return/requests"]');
      closeBtn.addEventListener('click', (e) => {
        e.preventDefault();
        document.querySelector('.modal-overlay').classList.add('opacity-0');
        setTimeout(() => {
          window.location.href = '/admin/return/requests';
        }, 300);
      });

      const actionButtons = document.querySelectorAll('.detail-section button');
      actionButtons.forEach(button => {
        button.addEventListener('click', async function(e) {
          const form = this.closest('form');
          if (form) {
            e.preventDefault();
            const action = this.textContent.trim().includes('Approve') ? 'approve' : 'reject';
            const result = await Swal.fire({
              title: `Are you sure you want to ${action} this return?`,
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#d4af37',
              cancelButtonColor: '#ef4444',
              confirmButtonText: `Yes, ${action} it!`,
              background: '#1e1e2f',
              color: '#e5e7eb'
            });

            if (result.isConfirmed) {
              const originalContent = this.innerHTML;
              this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
              try {
                const response = await fetch(form.action, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' }
                });
                if (response.ok) {
                  Swal.fire({
                    title: 'Success!',
                    text: `Return has been ${action}d.`,
                    icon: 'success',
                    background: '#1e1e2f',
                    color: '#e5e7eb',
                    confirmButtonColor: '#d4af37',
                    timer: 1500
                  }).then(() => {
                    window.location.reload();
                  });
                } else {
                  throw new Error('Failed to process request');
                }
              } catch (error) {
                console.error('Error:', error);
                this.innerHTML = originalContent;
                Swal.fire({
                  title: 'Error!',
                  text: 'An error occurred while processing the request.',
                  icon: 'error',
                  background: '#1e1e2f',
                  color: '#e5e7eb',
                  confirmButtonColor: '#d4af37'
                });
              }
            }
          }
        });
      });
    });
  </script>
</body>
</html>