<!-- views/order-status.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Status</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .status-bar {
            transition: width 0.5s ease-in-out;
        }
        
        .status-point {
            transition: all 0.3s ease-in-out;
        }
        
        .status-point.active {
            background-color: #4F46E5;
            border-color: #4F46E5;
        }
        
        .status-point.completed {
            background-color: #10B981;
            border-color: #10B981;
        }
        
        .status-line {
            transition: background-color 0.3s ease-in-out;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="container mx-auto px-4 py-8">
        <%- include('../partials/header') %>


        <div class="flex justify-between items-center mb-6">
            <a href="/orders" class="text-black hover:text-blue-300 transition duration-300">
                <i class="fas fa-arrow-left mr-2"></i>Back to Orders
            </a>
        </div>
        <!-- Order Status Bar -->
        <div class="mb-8">
            <div class="relative">
                <div class="flex justify-between items-center">
                    <% const statuses = ['Pending', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered']; %>
                    <% statuses.forEach((status, index) => { %>
                        <div class="flex flex-col items-center relative z-10">
                            <div class="status-point w-8 h-8 rounded-full border-2 border-gray-300 bg-white flex items-center justify-center"
                                 data-status="<%= status %>">
                                <% if (order.status === status || statuses.indexOf(order.status) > index) { %>
                                    <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                    </svg>
                                <% } %>
                            </div>
                            <span class="mt-2 text-sm font-medium <%= order.status === status ? 'text-indigo-600' : 'text-gray-500' %>">
                                <%= status %>
                            </span>
                        </div>
                    <% }); %>
                </div>
                <div class="absolute top-4 left-0 right-0 h-0.5 flex">
                    <div class="status-bar h-full bg-indigo-600" style="width: 0%"></div>
                    <div class="h-full bg-gray-200 flex-grow"></div>
                </div>
            </div>
        </div>

        <!-- Order Details -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-2xl font-semibold mb-4">Order Details</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <h3 class="text-lg font-medium mb-2">Order Information</h3>
                    <p class="text-gray-600">Order ID: <%= order._id %></p>
                    <p class="text-gray-600">Date: <%= new Date(order.date).toLocaleDateString() %></p>
                    <p class="text-gray-600">Payment Method: <%= order.paymentMethod %></p>
                    <p class="text-gray-600">Total Amount: $<%= order.orderAmount.toFixed(2) %></p>
                </div>
                <div>
                    <h3 class="text-lg font-medium mb-2">Delivery Address</h3>
                    <p class="text-gray-600">Address Type: <%= order.deliveryAddress.addressType %></p>
                    <p class="text-gray-600">Customer Name: <%= order.deliveryAddress.name %></p>
                    <p class="text-gray-600">Address: <%= order.deliveryAddress.address %></p>
                    <p class="text-gray-600">Landmark: <%= order.deliveryAddress.landmark%></p>
                    <p class="text-gray-600">City: <%= order.deliveryAddress.city %>, <%= order.deliveryAddress.state %></p>
                    <p class="text-gray-600">Pincode: <%= order.deliveryAddress.pincode %></p>
                </div>
            </div>
        </div>

        <!-- Products -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-2xl font-semibold mb-4">Products</h2>
            <div class="space-y-4">
                <% order.products.forEach(product => { %>
                    <div class="flex items-center border-b pb-4">
                        <div class="flex-grow">
                            <img src="<%= product.productId.images[0] %>" 
                         alt="<%= product.productId.name %>" 
                         class="w-20 h-20 object-cover rounded-lg"
                         loading="lazy">
                            <h3 class="text-lg font-medium"><%= product.productId.name %></h3>
                            <p class="text-gray-600">Quantity: <%= product.quantity %></p>
                            <p class="text-gray-600">Price: ₹<%= product.price.toFixed(2) %></p>
                        </div>
                        <p class="text-lg font-semibold">₹<%= product.totalPrice.toFixed(2) %></p>
                    </div>
                <% }); %>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-end space-x-4">
            <% if (['Pending', 'Processing', 'Shipped'].includes(order.status)) { %>
                <button id="cancelOrder" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors">
                    Cancel Order
                </button>
            <% } %>
            <% if (order.status === 'Delivered') { %>
                <button id="returnOrder" class="px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors">
                    Return Order
                </button>
            <% } %>
        </div>
    </div>


    <%- include('../partials/footer') %>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Update status bar based on current status
            const statusPoints = document.querySelectorAll('.status-point');
            const statusBar = document.querySelector('.status-bar');
            const currentStatus = '<%= order.status %>';
            const statuses = ['Pending', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered'];
            
            const currentIndex = statuses.indexOf(currentStatus);
            const progressPercentage = (currentIndex / (statuses.length - 1)) * 100;
            
            // Animate status bar
            setTimeout(() => {
                statusBar.style.width = `${progressPercentage}%`;
            }, 100);

            // Update status points
            statusPoints.forEach((point, index) => {
                if (index <= currentIndex) {
                    point.classList.add('completed');
                }
                if (index === currentIndex) {
                    point.classList.add('active');
                }
            });

            // Cancel Order Handler
            const cancelOrderBtn = document.getElementById('cancelOrder');
            if (cancelOrderBtn) {
                cancelOrderBtn.addEventListener('click', async () => {
                    if (confirm('Are you sure you want to cancel this order?')) {
                        try {
                            const response = await fetch(`/api/orders/${order._id}/cancel`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });
                            
                            if (response.ok) {
                                window.location.reload();
                            } else {
                                alert('Failed to cancel order');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Failed to cancel order');
                        }
                    }
                });
            }

            // Return Order Handler
            const returnOrderBtn = document.getElementById('returnOrder');
            if (returnOrderBtn) {
                returnOrderBtn.addEventListener('click', async () => {
                    if (confirm('Are you sure you want to return this order?')) {
                        try {
                            const response = await fetch(`/api/orders/${order._id}/return`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });
                            
                            if (response.ok) {
                                window.location.reload();
                            } else {
                                alert('Failed to return order');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Failed to return order');
                        }
                    }
                });
            }
        });
    </script>




















