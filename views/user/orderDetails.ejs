<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Status</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .status-bar { transition: width 0.5s ease-in-out; }
        .status-point { transition: all 0.3s ease-in-out; }
        .status-point.active { background-color: #4F46E5; border-color: #4F46E5; }
        .status-point.completed { background-color: #10B981; border-color: #10B981; }
        .status-point.cancelled { background-color: #EF4444; border-color: #EF4444; }
        .status-point.returned { background-color: #F59E0B; border-color: #F59E0B; }
        .status-line { transition: background-color 0.3s ease-in-out; }
        .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 50; overflow: auto; }
        .modal-content { animation: modalFadeIn 0.3s; }
        @keyframes modalFadeIn { from { opacity: 0; transform: translateY(-20px); } to { opacity: 1; transform: translateY(0); } }
    </style>
</head>
<body class="bg-gray-50">
    <div class="container mx-auto px-4 py-8">
        <%- include('../partials/header') %>

        <div class="flex justify-between items-center mb-6">
            <a href="/orders" class="text-black hover:text-blue-300 transition duration-300">
                <i class="fas fa-arrow-left mr-2"></i>Back to Orders
            </a>
        </div>

        <% if (success_msg && success_msg.length > 0) { %>
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6 shadow-sm">
                <%= success_msg %>
            </div>
        <% } %>
        <% if (error_msg && error_msg.length > 0) { %>
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6 shadow-sm">
                <%= error_msg %>
            </div>
        <% } %>

        <!-- Order Status Bar -->
        <div class="mb-8">
            <div class="relative">
                <div class="flex justify-between items-center">
                    <% const statuses = ['Pending', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered']; %>
                    <% let displayStatuses = statuses; %>
                    <% if (order.status === 'Cancelled') { displayStatuses = ['Pending', 'Cancelled']; } %>
                    <% if (order.status.includes('Return')) { displayStatuses = ['Pending', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered', order.status]; } %>
                    <% displayStatuses.forEach((status, index) => { %>
                        <div class="flex flex-col items-center relative z-10">
                            <div class="status-point w-8 h-8 rounded-full border-2 border-gray-300 bg-white flex items-center justify-center 
                                <%= status === 'Cancelled' ? 'cancelled' : status.includes('Return') ? 'returned' : '' %>"
                                data-status="<%= status %>">
                                <% if (order.status === status || 
                                      (order.status !== 'Cancelled' && !order.status.includes('Return') && statuses.indexOf(order.status) > index) || 
                                      (status === 'Cancelled' && order.status === 'Cancelled') ||
                                      (status.includes('Return') && order.status === status)) { %>
                                    <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                    </svg>
                                <% } %>
                            </div>
                            <span class="mt-2 text-sm font-medium 
                                <%= order.status === status ? (status === 'Cancelled' ? 'text-red-600' : status.includes('Return') ? 'text-yellow-600' : 'text-indigo-600') : 'text-gray-500' %>">
                                <%= status %>
                            </span>
                        </div>
                    <% }); %>
                </div>
                <div class="absolute top-4 left-0 right-0 h-0.5 flex">
                    <% if (order.status === 'Cancelled') { %>
                        <div class="status-bar h-full bg-red-600" style="width: 100%"></div>
                    <% } else if (order.status.includes('Return')) { %>
                        <div class="status-bar h-full bg-yellow-600" style="width: 100%"></div>
                    <% } else { %>
                        <div class="status-bar h-full bg-indigo-600" style="width: 0%"></div>
                        <div class="h-full bg-gray-200 flex-grow"></div>
                    <% } %>
                </div>
            </div>
        </div>

        <!-- Order Details -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-2xl font-semibold mb-4">Order Details</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <h3 class="text-lg font-medium mb-2">Order Information</h3>
                    <p class="text-gray-600">Order ID: <%= order._id %></p>
                    <p class="text-gray-600">Date: <%= new Date(order.date).toLocaleDateString() %></p>
                    <p class="text-gray-600">Payment Method: <%= order.paymentMethod %></p>
                    <p class="text-gray-600">Total Amount: ₹<%= order.orderAmount.toFixed(2) %></p>
                    <% if (order.status === 'Cancelled' && order.cancellationReason) { %>
                        <p class="text-red-600 mt-2">Cancellation Reason: <%= order.cancellationReason %></p>
                        <p class="text-gray-600">Cancelled On: <%= new Date(order.cancelledAt).toLocaleDateString() %></p>
                    <% } else if (order.status.includes('Return')) { %>
                        <div class="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
                            <p class="font-medium text-yellow-800">Return Status: <%= order.status %></p>
                            <% if (order.returnReason) { %>
                                <p class="text-yellow-700">Return Reason: <%= order.returnReason %></p>
                            <% } %>
                            <% if (order.returnRequestedAt) { %>
                                <p class="text-gray-600">Requested On: <%= new Date(order.returnRequestedAt).toLocaleDateString() %></p>
                            <% } %>
                            <% if (order.status === 'Return Rejected' && order.returnRejectionReason) { %>
                                <p class="text-red-600">Rejection Reason: <%= order.returnRejectionReason %></p>
                            <% } %>
                        </div>
                    <% } %>
                </div>
                <div>
                    <h3 class="text-lg font-medium mb-2">Delivery Address</h3>
                    <p class="text-gray-600">Address Type: <%= order.deliveryAddress.addressType %></p>
                    <p class="text-gray-600">Customer Name: <%= order.deliveryAddress.name %></p>
                    <p class="text-gray-600">Address: <%= order.deliveryAddress.address %></p>
                    <p class="text-gray-600">Landmark: <%= order.deliveryAddress.landmark %></p>
                    <p class="text-gray-600">City: <%= order.deliveryAddress.city %>, <%= order.deliveryAddress.state %></p>
                    <p class="text-gray-600">Pincode: <%= order.deliveryAddress.pincode %></p>
                </div>
            </div>
        </div>

        <!-- Products -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-2xl font-semibold mb-4">Products</h2>
            <div class="space-y-4">
                <% order.products.forEach((product, index) => { %>
                    <div class="flex items-center justify-between border-b pb-4">
                        <div class="flex items-center">
                            <img src="<%= product.productId.images[0] %>" 
                                 alt="<%= product.productId.name %>" 
                                 class="w-20 h-20 object-cover rounded-lg"
                                 loading="lazy">
                            <div class="ml-4">
                                <h3 class="text-lg font-medium"><%= product.productId.name %></h3>
                                <p class="text-gray-600">Quantity: <%= product.quantity %></p>
                                <p class="text-gray-600">Price: ₹<%= product.price.toFixed(2) %></p>
                                <p class="text-gray-600">Status: <%= product.status %></p>
                            </div>
                        </div>
                        <div class="flex items-center space-x-4">
                            <p class="text-lg font-semibold">₹<%= product.totalPrice.toFixed(2) %></p>
                            <% if (['Pending', 'Processing'].includes(order.status) && product.status === 'Active') { %>
                                <button class="cancel-product-btn px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 transition-colors" 
                                        data-product-index="<%= index %>">
                                    Cancel Product
                                </button>
                            <% } %>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-end space-x-4">
            <% if (['Pending', 'Processing', 'Out for Delivery', 'Shipped'].includes(order.status)) { %>
                <button id="cancelOrder" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors">
                    Cancel Order
                </button>
            <% } %>
            <% if (order.status === 'Delivered' && !order.status.includes('Return')) { %>
                <button id="returnOrder" class="px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors">
                    Return Order
                </button>
            <% } %>
        </div>
    </div>

    <!-- Cancellation Modal -->
    <div id="cancellationModal" class="modal">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="modal-content bg-white rounded-lg shadow-xl w-full max-w-md mx-auto p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-semibold text-gray-900">Cancel Order</h3>
                    <button id="closeModal" class="text-gray-400 hover:text-gray-500">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <p class="mb-4 text-gray-700">Please provide a reason for cancellation:</p>
                <form id="cancellationForm">
                    <div class="space-y-4">
                        <div><label class="block text-sm font-medium text-gray-700"><input type="radio" name="cancellationReason" value="Changed my mind" class="mr-2">Changed my mind</label></div>
                        <div><label class="block text-sm font-medium text-gray-700"><input type="radio" name="cancellationReason" value="Found better price elsewhere" class="mr-2">Found better price elsewhere</label></div>
                        <div><label class="block text-sm font-medium text-gray-700"><input type="radio" name="cancellationReason" value="Ordered by mistake" class="mr-2">Ordered by mistake</label></div>
                        <div><label class="block text-sm font-medium text-gray-700"><input type="radio" name="cancellationReason" value="Shipping time is too long" class="mr-2">Shipping time is too long</label></div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">
                                <input type="radio" name="cancellationReason" value="Other" class="mr-2" id="otherReason">Other
                            </label>
                            <div id="otherReasonContainer" class="mt-2 hidden">
                                <textarea id="otherReasonText" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" rows="3" placeholder="Please specify your reason"></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" id="cancelModalBtn" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Cancel</button>
                        <button type="submit" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">Submit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Return Order Modal -->
    <div id="returnModal" class="modal">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="modal-content bg-white rounded-lg shadow-xl w-full max-w-md mx-auto p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-semibold text-gray-900">Return Order</h3>
                    <button id="closeReturnModal" class="text-gray-400 hover:text-gray-500">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <p class="mb-4 text-gray-700">Please provide a reason for returning this order:</p>
                <form id="returnForm">
                    <div class="space-y-4">
                        <div><label class="block text-sm font-medium text-gray-700"><input type="radio" name="returnReason" value="Damaged product" class="mr-2">Damaged product</label></div>
                        <div><label class="block text-sm font-medium text-gray-700"><input type="radio" name="returnReason" value="Wrong item received" class="mr-2">Wrong item received</label></div>
                        <div><label class="block text-sm font-medium text-gray-700"><input type="radio" name="returnReason" value="Item doesn't match description" class="mr-2">Item doesn't match description</label></div>
                        <div><label class="block text-sm font-medium text-gray-700"><input type="radio" name="returnReason" value="Product defective" class="mr-2">Product defective</label></div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">
                                <input type="radio" name="returnReason" value="Other" class="mr-2" id="otherReturnReason">Other
                            </label>
                            <div id="otherReturnReasonContainer" class="mt-2 hidden">
                                <textarea id="otherReturnReasonText" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" rows="3" placeholder="Please specify your reason"></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" id="cancelReturnModalBtn" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Cancel</button>
                        <button type="submit" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500">Submit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Product Cancellation Modal -->
    <div id="productCancellationModal" class="modal">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="modal-content bg-white rounded-lg shadow-xl w-full max-w-md mx-auto p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-semibold text-gray-900">Cancel Product</h3>
                    <button id="closeProductModal" class="text-gray-400 hover:text-gray-500">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <p class="mb-4 text-gray-700">Please provide a reason for canceling this product:</p>
                <form id="productCancellationForm">
                    <input type="hidden" name="productIndex" id="productIndex">
                    <div class="space-y-4">
                        <div><label class="block text-sm font-medium text-gray-700"><input type="radio" name="productCancellationReason" value="Changed my mind" class="mr-2">Changed my mind</label></div>
                        <div><label class="block text-sm font-medium text-gray-700"><input type="radio" name="productCancellationReason" value="Found better price elsewhere" class="mr-2">Found better price elsewhere</label></div>
                        <div><label class="block text-sm font-medium text-gray-700"><input type="radio" name="productCancellationReason" value="Ordered by mistake" class="mr-2">Ordered by mistake</label></div>
                        <div><label class="block text-sm font-medium text-gray-700"><input type="radio" name="productCancellationReason" value="Other" class="mr-2" id="otherProductReason">Other</label></div>
                        <div id="otherProductReasonContainer" class="mt-2 hidden">
                            <textarea id="otherProductReasonText" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" rows="3" placeholder="Please specify your reason"></textarea>
                        </div>
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" id="cancelProductModalBtn" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50">Cancel</button>
                        <button type="submit" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700">Submit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Status Bar Logic
            const statusPoints = document.querySelectorAll('.status-point');
            const statusBar = document.querySelector('.status-bar');
            const currentStatus = '<%= order.status %>';
            const statuses = ['Pending', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered'];

            if (currentStatus !== 'Cancelled' && !currentStatus.includes('Return')) {
                const currentIndex = statuses.indexOf(currentStatus);
                const progressPercentage = (currentIndex / (statuses.length - 1)) * 100;
                setTimeout(() => {
                    statusBar.style.width = `₹{progressPercentage}%`;
                }, 100);
                statusPoints.forEach((point, index) => {
                    if (index <= currentIndex) point.classList.add('completed');
                    if (index === currentIndex) point.classList.add('active');
                });
            }

            // Modal Elements
            const cancellationModal = document.getElementById('cancellationModal');
            const cancellationForm = document.getElementById('cancellationForm');
            const closeModalBtn = document.getElementById('closeModal');
            const cancelModalBtn = document.getElementById('cancelModalBtn');
            const otherReason = document.getElementById('otherReason');
            const otherReasonContainer = document.getElementById('otherReasonContainer');

            const returnModal = document.getElementById('returnModal');
            const returnForm = document.getElementById('returnForm');
            const closeReturnModalBtn = document.getElementById('closeReturnModal');
            const cancelReturnModalBtn = document.getElementById('cancelReturnModalBtn');
            const otherReturnReason = document.getElementById('otherReturnReason');
            const otherReturnReasonContainer = document.getElementById('otherReturnReasonContainer');

            const productCancellationModal = document.getElementById('productCancellationModal');
            const productCancellationForm = document.getElementById('productCancellationForm');
            const closeProductModalBtn = document.getElementById('closeProductModal');
            const cancelProductModalBtn = document.getElementById('cancelProductModalBtn');
            const otherProductReason = document.getElementById('otherProductReason');
            const otherProductReasonContainer = document.getElementById('otherProductReasonContainer');
            const productIndexInput = document.getElementById('productIndex');

            // Toggle "Other" Reason Textarea
            if (otherReason) {
                otherReason.addEventListener('change', () => {
                    otherReasonContainer.classList.toggle('hidden', !otherReason.checked);
                });
            }
            if (otherReturnReason) {
                otherReturnReason.addEventListener('change', () => {
                    otherReturnReasonContainer.classList.toggle('hidden', !otherReturnReason.checked);
                });
            }
            if (otherProductReason) {
                otherProductReason.addEventListener('change', () => {
                    otherProductReasonContainer.classList.toggle('hidden', !otherProductReason.checked);
                });
            }

            // Cancellation Modal Functions
            const openCancellationModal = () => {
                cancellationModal.style.display = 'block';
                document.body.style.overflow = 'hidden';
            };
            const closeCancellationModal = () => {
                cancellationModal.style.display = 'none';
                document.body.style.overflow = '';
            };

            // Return Modal Functions
            const openReturnModal = () => {
                returnModal.style.display = 'block';
                document.body.style.overflow = 'hidden';
            };
            const closeReturnModal = () => {
                returnModal.style.display = 'none';
                document.body.style.overflow = '';
            };

            // Product Cancellation Modal Functions
            const openProductCancellationModal = (index) => {
                productIndexInput.value = index;
                productCancellationModal.style.display = 'block';
                document.body.style.overflow = 'hidden';
            };
            const closeProductCancellationModal = () => {
                productCancellationModal.style.display = 'none';
                document.body.style.overflow = '';
                productCancellationForm.reset();
                otherProductReasonContainer.classList.add('hidden');
            };

            // Button Event Listeners
            const cancelOrderBtn = document.getElementById('cancelOrder');
            if (cancelOrderBtn) {
                cancelOrderBtn.addEventListener('click', openCancellationModal);
            }

            const returnOrderBtn = document.getElementById('returnOrder');
            if (returnOrderBtn) {
                returnOrderBtn.addEventListener('click', openReturnModal);
            } else {
                console.warn('Return Order button not found. Check order.status condition.');
            }

            document.querySelectorAll('.cancel-product-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const productIndex = btn.getAttribute('data-product-index');
                    openProductCancellationModal(productIndex);
                });
            });

            // Close Modal Buttons
            if (closeModalBtn) closeModalBtn.addEventListener('click', closeCancellationModal);
            if (cancelModalBtn) cancelModalBtn.addEventListener('click', closeCancellationModal);
            if (closeReturnModalBtn) closeReturnModalBtn.addEventListener('click', closeReturnModal);
            if (cancelReturnModalBtn) cancelReturnModalBtn.addEventListener('click', closeReturnModal);
            if (closeProductModalBtn) closeProductModalBtn.addEventListener('click', closeProductCancellationModal);
            if (cancelProductModalBtn) cancelProductModalBtn.addEventListener('click', closeProductCancellationModal);

            // Close Modal on Outside Click
            if (cancellationModal) {
                cancellationModal.addEventListener('click', (e) => {
                    if (e.target === cancellationModal) closeCancellationModal();
                });
            }
            if (returnModal) {
                returnModal.addEventListener('click', (e) => {
                    if (e.target === returnModal) closeReturnModal();
                });
            }
            if (productCancellationModal) {
                productCancellationModal.addEventListener('click', (e) => {
                    if (e.target === productCancellationModal) closeProductCancellationModal();
                });
            }

            // Cancellation Form Submission
            if (cancellationForm) {
                cancellationForm.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const formData = new FormData(cancellationForm);
                    let reason = formData.get('cancellationReason');
                    if (reason === 'Other') {
                        const otherText = document.getElementById('otherReasonText').value.trim();
                        if (!otherText) {
                            Swal.fire('Error', 'Please specify your reason', 'error');
                            return;
                        }
                        reason = otherText;
                    }
                    if (!reason) {
                        Swal.fire('Error', 'Please select a reason for cancellation', 'error');
                        return;
                    }

                    closeCancellationModal();
                    const result = await Swal.fire({
                        title: 'Are you sure?',
                        text: "You won't be able to revert this cancellation!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, cancel order!'
                    });

                    if (result.isConfirmed) {
                        try {
                            const response = await fetch(`/api/orders/<%= order._id %>/cancel`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ reason })
                            });
                            const data = await response.json();
                            if (response.ok) {
                                await Swal.fire('Cancelled!', 'Your order has been cancelled successfully.', 'success');
                                window.location.reload();
                            } else {
                                throw new Error(data.message || 'Failed to cancel order');
                            }
                        } catch (error) {
                            Swal.fire('Error', error.message || 'Network or server error', 'error');
                        }
                    }
                });
            }

            // Return Form Submission
            if (returnForm) {
                returnForm.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const formData = new FormData(returnForm);
                    let reason = formData.get('returnReason');
                    if (reason === 'Other') {
                        const otherText = document.getElementById('otherReturnReasonText').value.trim();
                        if (!otherText) {
                            Swal.fire('Error', 'Please specify your return reason', 'error');
                            return;
                        }
                        reason = otherText;
                    }
                    if (!reason) {
                        Swal.fire('Error', 'Please select a reason for returning the order', 'error');
                        return;
                    }

                    closeReturnModal();
                    try {
                        const response = await fetch(`/api/orders/<%= order._id %>/return`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ reason })
                        });
                        const data = await response.json();
                        if (response.ok) {
                            await Swal.fire('Return Requested', 'Your return request has been submitted successfully.', 'success');
                            window.location.reload();
                        } else {
                            throw new Error(data.message || 'Failed to submit return request');
                        }
                    } catch (error) {
                        Swal.fire('Error', error.message || 'An unexpected error occurred', 'error');
                    }
                });
            }

            // Product Cancellation Form Submission
            if (productCancellationForm) {
                productCancellationForm.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const formData = new FormData(productCancellationForm);
                    const productIndex = formData.get('productIndex');
                    let reason = formData.get('productCancellationReason');
                    if (reason === 'Other') {
                        const otherText = document.getElementById('otherProductReasonText').value.trim();
                        if (!otherText) {
                            Swal.fire('Error', 'Please specify your reason', 'error');
                            return;
                        }
                        reason = otherText;
                    }
                    if (!reason) {
                        Swal.fire('Error', 'Please select a reason for cancellation', 'error');
                        return;
                    }

                    closeProductCancellationModal();
                    const result = await Swal.fire({
                        title: 'Are you sure?',
                        text: "You won't be able to revert this product cancellation!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, cancel product!'
                    });

                    if (result.isConfirmed) {
                        try {
                            const response = await fetch(`/api/orders/<%= order._id %>/cancel-product`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ productIndex, reason })
                            });
                            const data = await response.json();
                            if (response.ok) {
                                await Swal.fire('Cancelled!', 'The product has been cancelled successfully.', 'success');
                                window.location.reload();
                            } else {
                                throw new Error(data.message || 'Failed to cancel product');
                            }
                        } catch (error) {
                            Swal.fire('Error', error.message || 'Network or server error', 'error');
                        }
                    }
                });
            }
        });
    </script>
</body>
</html>