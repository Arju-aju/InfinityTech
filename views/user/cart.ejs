<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Shopping Cart - InfinityTech</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
    }

    .fade-in {
      animation: fadeIn 0.3s ease;
    }

    .slide-up {
      animation: slideUp 0.3s ease;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    @keyframes slideUp {
      from { transform: translateY(20px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }

    /* Golden Yellow Button Styling */
    .btn-primary {
      background-color: #FFC107; /* Golden yellow */
      color: #1F2937; /* Dark gray text for contrast */
      transition: all 0.3s ease;
    }
    .btn-primary:hover {
      background-color: #FFB300; /* Slightly darker golden yellow on hover */
      box-shadow: 0 4px 15px rgba(255, 193, 7, 0.5); /* Subtle glow effect */
      transform: translateY(-2px); /* Slight lift */
    }
  </style>
</head>
<body class="min-h-screen">
  <%- include('../partials/header') %>

  <!-- Flash notifications -->
  <% if (message && message.content) { %>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        showNotification('<%= message.content %>', '<%= message.type %>');
      });
    </script>
  <% } %>

  <!-- Cart Page -->
  <div class="container mx-auto px-4 py-16">
    <!-- Breadcrumbs -->
    <nav class="flex mb-8" aria-label="Breadcrumb">
      <!-- Same breadcrumb content -->
    </nav>

    <div class="cart-container p-6 slide-up">
      <div class="flex items-center justify-between mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Your Cart</h1>
        <a href="/shop" class="btn-primary px-4 py-2 rounded-full text-sm font-semibold flex items-center">
          <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
          Continue Shopping
        </a>
      </div>

      <div class="lg:grid lg:grid-cols-12 lg:gap-x-12">
        <!-- Cart Items -->
        <div class="lg:col-span-8">
          <% if (cartItems.length > 0) { %>
            <div class="space-y-6">
              <% cartItems.forEach(item => { %>
                <div class="cart-item flex flex-col sm:flex-row items-start bg-white p-6 rounded-xl border border-gray-100 fade-in" data-product-id="<%= item.product._id %>">
                  <div class="flex-shrink-0 bg-gray-50 p-2 rounded-lg">
                    <img src="<%= item.product.images[0] %>" alt="<%= item.product.name %>" class="w-24 h-24 object-cover rounded">
                  </div>
                  <div class="mt-4 sm:mt-0 sm:ml-6 flex-1">
                    <h3 class="text-xl font-semibold text-gray-900"><%= item.product.name %></h3>
                    <div class="mt-2 text-sm text-gray-600 space-y-1">
                      <p>Price: <span class="font-medium text-gray-900">₹<%= item.offerDetails.finalPrice.toFixed(2) %></span></p>
                      <% if (item.offerDetails.discountPercentage > 0) { %>
                        <p class="text-gray-500 line-through">₹<%= item.offerDetails.basePrice.toFixed(2) %></p>
                        <p class="text-green-600 font-semibold"><%= item.offerDetails.discountPercentage.toFixed(0) %>% OFF</p>
                      <% } %>
                      <p>Total: <span class="font-medium text-gray-900 item-total">₹<%= item.total.toFixed(2) %></span></p>
                      <p>In Stock: <span class="font-medium text-gray-700 stock-display" data-stock="<%= item.product._id %>"><%= item.product.stock %></span></p>
                    </div>
                  </div>
                  <div class="mt-4 sm:mt-0 sm:ml-6 flex items-center space-x-4">
                    <div class="flex items-center border border-gray-200 rounded-full">
                      <button 
                        class="quantity-btn decrease-btn px-3 py-1 text-gray-700 <%= item.product.stock < 10 ? 'opacity-50 cursor-not-allowed' : '' %>" 
                        data-product-id="<%= item.product._id %>" 
                        <%= item.product.stock < 10 ? 'disabled' : '' %>
                      >-</button>
                      <span class="quantity px-4 py-1 text-gray-900 font-medium" data-quantity="<%= item.product._id %>"><%= item.quantity %></span>
                      <button 
                        class="quantity-btn increase-btn px-3 py-1 text-gray-700 <%= item.product.stock < 10 ? 'opacity-50 cursor-not-allowed' : '' %>" 
                        data-product-id="<%= item.product._id %>" 
                        <%= item.product.stock < 10 ? 'disabled' : '' %>
                      >+</button>
                    </div>
                    <button class="remove-btn text-red-600 hover:text-red-800 transition-colors font-medium flex items-center" data-product-id="<%= item.product._id %>">
                      <svg class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                      </svg>
                      Remove
                    </button>
                  </div>
                </div>
              <% }); %>
            </div>
          <% } else { %>
            <div class="text-center py-16 bg-white rounded-xl border border-gray-100 fade-in">
              <!-- Same empty cart content -->
            </div>
          <% } %>
        </div>

        <!-- Order Summary -->
        <div class="lg:col-span-4 mt-10 lg:mt-0">
          <div class="bg-white rounded-xl shadow-md p-6 border border-gray-100 sticky top-24 fade-in">
            <h2 class="text-2xl font-semibold text-gray-900 mb-6">Order Summary</h2>
            <div class="space-y-4">
              <div class="flex justify-between text-gray-600">
                <p>Subtotal</p>
                <p class="font-medium cart-subtotal">₹<%= cartSubtotal.toFixed(2) %></p>
              </div>
              <div class="flex justify-between text-gray-600">
                <p>Shipping</p>
                <p class="font-medium cart-shipping">₹<%= shippingCharge.toFixed(2) %></p>
              </div>
              <div class="border-t border-gray-200 pt-4">
                <div class="flex justify-between">
                  <p class="text-lg font-semibold text-gray-900">Total</p>
                  <p class="text-lg font-semibold text-yellow-400 cart-total">₹<%= cartTotal.toFixed(2) %></p>
                </div>
              </div>
            </div>
            <a href="/checkout" class="mt-6 block w-full btn-primary px-6 py-4 text-center rounded-full font-bold text-lg">Proceed to Checkout</a>
            <div class="mt-4 text-center text-sm text-gray-600">
              <svg class="inline h-5 w-5 text-green-500 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
              </svg>
              Secure Checkout
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>

  <script>
    async function updateQuantity(productId, action) {
      try {
        const quantityElement = document.querySelector(`[data-quantity="${productId}"]`);
        const stockElement = document.querySelector(`[data-stock="${productId}"]`);
        const currentQuantity = parseInt(quantityElement.textContent);
        const currentStock = parseInt(stockElement.textContent);
        const newQuantity = action === 'increase' ? currentQuantity + 1 : currentQuantity - 1;

        if (newQuantity < 1) {
          return removeFromCart(productId);
        }

        if (currentStock < 10 && action === 'increase') {
          showNotification('Stock is low, cannot increase quantity!', 'error');
          return;
        }

        const response = await fetch(`/cart/update/${productId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ quantity: action === 'increase' ? 1 : -1 })
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.message || 'Failed to update quantity');
        }

        // Update UI
        quantityElement.textContent = data.newQuantity;
        stockElement.textContent = data.remainingStock;
        const itemElement = document.querySelector(`[data-product-id="${productId}"]`);
        const itemTotalElement = itemElement.querySelector('.item-total');
        itemTotalElement.textContent = `₹${data.itemTotal}`;

        const subtotalElement = document.querySelector('.cart-subtotal');
        const shippingElement = document.querySelector('.cart-shipping');
        const totalElement = document.querySelector('.cart-total');
        subtotalElement.textContent = `₹${data.cartSubtotal}`;
        shippingElement.textContent = `₹${data.shippingCharge}`;
        totalElement.textContent = `₹${data.cartTotal}`;

        // Disable buttons if stock < 10
        const increaseBtn = itemElement.querySelector('.increase-btn');
        const decreaseBtn = itemElement.querySelector('.decrease-btn');
        if (data.remainingStock < 10) {
          increaseBtn.disabled = true;
          increaseBtn.classList.add('opacity-50', 'cursor-not-allowed');
        } else {
          increaseBtn.disabled = false;
          increaseBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        }
        decreaseBtn.disabled = data.newQuantity === 1;

        showNotification('Quantity updated successfully!', 'success');
      } catch (error) {
        console.error('Error updating quantity:', error);
        showNotification(error.message || 'An error occurred while updating quantity', 'error');
      }
    }

    async function removeFromCart(productId) {
      try {
        const result = await Swal.fire({
          title: 'Remove Item?',
          text: 'Are you sure you want to remove this item?',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#1f2937',
          cancelButtonColor: '#dc3545',
          confirmButtonText: 'Yes, remove it!'
        });

        if (result.isConfirmed) {
          const response = await fetch(`/cart/remove/${productId}`, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' }
          });

          const data = await response.json();

          if (!response.ok) {
            throw new Error(data.message || 'Failed to remove item');
          }

          // Animate and remove item
          const itemElement = document.querySelector(`[data-product-id="${productId}"]`);
          itemElement.style.transition = 'opacity 0.3s ease';
          itemElement.style.opacity = '0';
          setTimeout(() => itemElement.remove(), 300);

          // Update totals
          const subtotalElement = document.querySelector('.cart-subtotal');
          const shippingElement = document.querySelector('.cart-shipping');
          const totalElement = document.querySelector('.cart-total');
          subtotalElement.textContent = `₹${data.cartSubtotal}`;
          shippingElement.textContent = `₹${data.shippingCharge}`;
          totalElement.textContent = `₹${data.cartTotal}`;

          showNotification('Item removed successfully!', 'success');
          if (data.isEmpty) setTimeout(() => location.reload(), 1000);
        }
      } catch (error) {
        console.error('Error removing item:', error);
        showNotification(error.message || 'An error occurred while removing the item', 'error');
      }
    }

    function showNotification(message, type) {
      Swal.fire({
        text: message,
        icon: type,
        toast: true,
        position: 'top-end',
        timer: 3000,
        timerProgressBar: true,
        showConfirmButton: false,
        background: type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#007bff',
        color: '#fff'
      });
    }

    // Add event listeners after DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('.cart-item').forEach((item, index) => {
        setTimeout(() => item.classList.add('slide-up'), index * 100);
      });

      document.querySelectorAll('.increase-btn').forEach(button => {
        button.addEventListener('click', () => {
          const productId = button.getAttribute('data-product-id');
          updateQuantity(productId, 'increase');
        });
      });

      document.querySelectorAll('.decrease-btn').forEach(button => {
        button.addEventListener('click', () => {
          const productId = button.getAttribute('data-product-id');
          updateQuantity(productId, 'decrease');
        });
      });

      document.querySelectorAll('.remove-btn').forEach(button => {
        button.addEventListener('click', () => {
          const productId = button.getAttribute('data-product-id');
          removeFromCart(productId);
        });
      });
    });
  </script>
</body>
</html>