<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Shopping Cart - InfinityTech</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="min-h-screen bg-gray-100">
  <%- include('../partials/header') %>

  <!-- Flash notifications -->
  <% if (message && message.content) { %>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        Swal.fire({
          icon: '<%= message.type %>',
          title: '<%= message.type === "error" ? "Oops..." : "Success" %>',
          text: '<%= message.content %>',
          toast: true,
          position: 'top-end',
          timer: 3000,
          timerProgressBar: true,
          showConfirmButton: false
        });
      });
    </script>
  <% } %>

  <!-- Cart Page -->
  <div class="pt-6">
    <!-- Breadcrumbs -->
    <div class="max-w-7xl mx-auto px-4 mb-6">
      <nav class="flex" aria-label="Breadcrumb">
        <ol class="inline-flex items-center space-x-1 md:space-x-3">
          <li class="inline-flex items-center">
            <a href="/" class="text-gray-700 hover:text-blue-600 transition-colors duration-200">
              <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
              </svg>
              Home
            </a>
          </li>
          <li>
            <div class="flex items-center">
              <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
              </svg>
              <span class="text-blue-600 ml-1 md:ml-2 font-medium">Cart</span>
            </div>
          </li>
        </ol>
      </nav>
    </div>

    <div class="pt-4">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between mb-8">
          <h1 class="text-3xl font-bold text-gray-900">Shopping Cart</h1>
          <a href="/shop" class="hidden sm:inline-flex items-center text-blue-600 hover:text-blue-800 font-medium transition-colors duration-200">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
            </svg>
            Continue Shopping
          </a>
        </div>

        <div class="lg:grid lg:grid-cols-12 lg:gap-x-12 lg:items-start">
          <!-- Cart Items -->
          <div class="lg:col-span-7">
            <% if (cartItems.length > 0) { %>
              <div class="space-y-4">
                <% cartItems.forEach(item => { %>
                  <div class="flex items-center bg-white p-6 rounded-lg shadow-md border border-gray-100 hover:shadow-xl transition-shadow duration-200">
                    <div class="flex-shrink-0 bg-gray-50 p-2 rounded-md">
                      <img src="<%= item.product.images[0] %>" alt="<%= item.product.name %>" class="w-20 h-20 object-cover rounded">
                    </div>
                    <div class="ml-6 flex-1">
                      <h3 class="text-lg font-medium text-gray-900 mb-1"><%= item.product.name %></h3>
                      <div class="flex flex-col sm:flex-row sm:items-center text-sm text-gray-500 space-y-1 sm:space-y-0 sm:space-x-4">
                        <p>Price: <span class="font-medium text-gray-700">₹<%= item.offerDetails.finalPrice.toFixed(2) %></span></p>
                        <% if (item.offerDetails.discountPercentage > 0) { %>
                          <p class="text-gray-500 line-through">₹<%= item.offerDetails.originalPrice.toFixed(2) %></p>
                          <p class="text-green-600 font-semibold"><%= item.offerDetails.discountPercentage.toFixed(0) %>% OFF</p>
                          <p class="text-blue-600 text-sm">(<%= item.offerDetails.appliedOfferType.charAt(0).toUpperCase() + item.offerDetails.appliedOfferType.slice(1) %> Offer)</p>
                        <% } %>
                        <p>Total: <span class="font-medium text-gray-700">₹<%= item.total.toFixed(2) %></span></p>
                        <p>In Stock: <span class="font-medium text-gray-700"><%= item.product.stock %></span></p>
                      </div>
                    </div>
                    <div class="ml-4 flex flex-col space-y-2">
                      <div class="flex items-center space-x-2 border border-gray-200 rounded-full overflow-hidden">
                        <button onclick="updateQuantity('<%= item.product._id %>', 'decrease')" class="px-3 py-1 bg-gray-100 hover:bg-gray-200 transition-colors text-gray-700">-</button>
                        <span data-product-id="<%= item.product._id %>" class="text-gray-900 px-2 font-medium"><%= item.quantity %></span>
                        <button onclick="updateQuantity('<%= item.product._id %>', 'increase')" class="px-3 py-1 bg-gray-100 hover:bg-gray-200 transition-colors text-gray-700">+</button>
                      </div>
                      <button onclick="removeFromCart('<%= item.product._id %>')" class="text-red-600 hover:text-red-800 transition-colors font-medium text-sm flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        Remove
                      </button>
                    </div>
                  </div>
                <% }); %>
              </div>
            <% } else { %>
              <div class="text-center py-16 bg-white rounded-lg border border-gray-100 shadow-md">
                <svg class="mx-auto h-16 w-16 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"/>
                </svg>
                <h3 class="mt-4 text-xl font-medium text-gray-900">Your cart is empty</h3>
                <p class="mt-2 text-base text-gray-500">Start shopping to add items to your cart</p>
                <div class="mt-8">
                  <a href="/shop" class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium shadow-sm">Continue Shopping</a>
                </div>
              </div>
            <% } %>

            <!-- Visible only on mobile -->
            <div class="mt-6 lg:hidden">
              <a href="/shop" class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                </svg>
                Continue Shopping
              </a>
            </div>
          </div>

          <!-- Order Summary -->
          <div class="mt-10 lg:mt-0 lg:col-span-5">
            <div class="bg-white rounded-lg shadow-md p-6 border border-gray-100 sticky top-4">
              <h2 class="text-xl font-semibold text-gray-900 mb-6">Order Summary</h2>
              <div class="space-y-4">
                <div class="flex items-center justify-between pb-4">
                  <p class="text-gray-600">Subtotal</p>
                  <p class="font-medium text-gray-900">₹<%= cartTotal.toFixed(2) %></p>
                </div>
                <div class="border-t border-gray-200 pt-4">
                  <div class="flex items-center justify-between">
                    <p class="text-lg font-medium text-gray-900">Order Total</p>
                    <p class="text-lg font-medium text-blue-600">₹<%= cartTotal.toFixed(2) %></p>
                  </div>
                </div>
              </div>
              <div class="mt-8">
                <a href="/checkout" class="block w-full px-6 py-4 bg-blue-600 text-white text-center rounded-lg hover:bg-blue-700 transition-colors duration-200 font-bold shadow-md">Proceed to Checkout</a>
              </div>
              <div class="mt-6 border-t border-gray-200 pt-6">
                <div class="flex items-center justify-center text-sm text-gray-500">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                  </svg>
                  Secure checkout
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>

  <script>
    async function updateQuantity(itemId, action) {
      try {
        const quantityElement = document.querySelector(`[data-product-id="${itemId}"]`);
        const currentQuantity = parseInt(quantityElement.textContent);

        if (action === 'decrease' && currentQuantity <= 1) {
          const result = await Swal.fire({
            title: 'Remove Item?',
            text: 'Do you want to remove this item from cart?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
          });

          if (result.isConfirmed) {
            return removeFromCart(itemId);
          }
          return;
        }

        const response = await fetch(`/cart/update/${itemId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ quantity: action === 'increase' ? 1 : -1 })
        });

        const data = await response.json();

        if (response.ok) {
          quantityElement.textContent = data.newQuantity;
          const itemTotalElement = quantityElement.closest('.flex').querySelector('.text-gray-500');
          if (itemTotalElement) {
            itemTotalElement.textContent = `Total: ₹${data.total}`;
          }
          const cartTotalElements = document.querySelectorAll('.text-gray-900');
          cartTotalElements.forEach(element => {
            if (element.textContent.includes('₹')) {
              element.textContent = `₹${data.cartTotal.toFixed(2)}`;
            }
          });
          Swal.fire({
            icon: 'success',
            title: 'Updated!',
            text: 'Cart quantity updated successfully',
            toast: true,
            position: 'top-end',
            timer: 2000,
            timerProgressBar: true,
            showConfirmButton: false
          });
        } else {
          let errorMessage = data.message;
          if (data.message.includes('Maximum quantity limit')) {
            errorMessage = 'You can only add up to 10 items of the same product';
          }
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: errorMessage,
            toast: true,
            position: 'top-end',
            timer: 3000,
            timerProgressBar: true,
            showConfirmButton: false
          });
          if (data.currentQuantity) {
            quantityElement.textContent = data.currentQuantity;
          }
        }
      } catch (error) {
        console.error('Error updating quantity:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An error occurred while updating the cart',
          toast: true,
          position: 'top-end',
          timer: 3000,
          timerProgressBar: true,
          showConfirmButton: false
        });
      }
    }

    async function removeFromCart(itemId) {
      try {
        const result = await Swal.fire({
          title: 'Are you sure?',
          text: "You won't be able to revert this!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, remove it!'
        });

        if (result.isConfirmed) {
          const response = await fetch(`/cart/remove/${itemId}`, {
            method: 'DELETE'
          });

          const data = await response.json();

          if (response.ok) {
            const itemElement = document.querySelector(`[data-product-id="${itemId}"]`);
            if (itemElement) {
              const cartItem = itemElement.closest('.flex.items-center.bg-white');
              if (cartItem) {
                cartItem.remove();
              }
            }
            if (data.cartTotal !== undefined) {
              const cartTotalElements = document.querySelectorAll('.text-gray-900');
              cartTotalElements.forEach(element => {
                if (element.textContent.includes('₹')) {
                  element.textContent = `₹${data.cartTotal.toFixed(2)}`;
                }
              });
            }
            Swal.fire({
              icon: 'success',
              title: 'Removed!',
              text: 'Item has been removed from cart.',
              toast: true,
              position: 'top-end',
              timer: 2000,
              timerProgressBar: true,
              showConfirmButton: false
            });
            if (data.isEmpty) {
              window.location.reload();
            }
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.message || 'Failed to remove item',
              toast: true,
              position: 'top-end',
              timer: 3000,
              timerProgressBar: true,
              showConfirmButton: false
            });
          }
        }
      } catch (error) {
        console.error('Error removing item:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An error occurred while removing the item',
          toast: true,
          position: 'top-end',
          timer: 3000,
          timerProgressBar: true,
          showConfirmButton: false
        });
      }
    }
  </script>
</body>
</html>