<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Shopping Cart</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<%- include('../partials/header') %>
<body class="min-h-screen bg-gray-50">
  <!-- Cart Page -->
  <div class="pt-6">
    <!-- Breadcrumbs -->
    <div class="max-w-7xl mx-auto px-4 mb-8">
      <nav class="flex" aria-label="Breadcrumb">
        <ol class="inline-flex items-center space-x-1 md:space-x-3">
          <li class="inline-flex items-center">
            <a href="/" class="text-gray-700 hover:text-indigo-600">
              <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
              </svg>
              Home
            </a>
          </li>
          <li>
            <div class="flex items-center">
              <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
              </svg>
              <span class="text-indigo-600 ml-1 md:ml-2 font-medium">Cart</span>
            </div>
          </li>
        </ol>
      </nav>
    </div>

    <div class="pt-6">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-8">Shopping Cart</h1>
  
        <div class="lg:grid lg:grid-cols-12 lg:gap-x-12 lg:items-start">
          <!-- Cart Items -->
          <div class="lg:col-span-7">
            <% if (cartItems.length > 0) { %>
              <div class="space-y-4">
                <% cartItems.forEach(item => { %>
                  <div class="flex items-center bg-white p-4 rounded-lg shadow">
                    <img src="<%= item.product.images[0] %>" alt="<%= item.product.name %>" class="w-20 h-20 object-cover rounded">
                    <div class="ml-4 flex-1">
                      <h3 class="text-lg font-medium text-gray-900"><%= item.product.name %></h3>
                      <p class="text-sm text-gray-500">Price: ₹<%= item.discountedPrice.toFixed(2) %></p>
                      <p class="text-sm text-gray-500">Total: ₹<%= item.total.toFixed(2) %></p>
                    </div>
                    <div class="flex items-center space-x-2">
                      <button onclick="updateQuantity('<%= item.product._id %>', 'decrease')" class="px-2 py-1 bg-gray-200 rounded">-</button>
                      <span data-product-id="<%= item.product._id %>" class="text-gray-900"><%= item.quantity %></span>
                      <button onclick="updateQuantity('<%= item.product._id %>', 'increase')" class="px-2 py-1 bg-gray-200 rounded">+</button>
                  </div>
                  <p class="text-sm text-gray-500">In Stock: <%= item.product.stock %></p>
                    <button onclick="removeFromCart('<%= item.product._id %>')" class="ml-4 text-red-600">Remove</button>
                  </div>
                <% }); %>
              </div>
            <% } else { %>
              <div class="text-center py-12 bg-white rounded-lg">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"/>
                </svg>
                <h3 class="mt-2 text-lg font-medium text-gray-900">Your cart is empty</h3>
                <p class="mt-1 text-sm text-gray-500">Start shopping to add items to your cart</p>
                <div class="mt-6">
                  <a href="/shop" class="px-4 py-2 bg-indigo-600 text-white rounded-md">Continue Shopping</a>
                </div>
              </div>
            <% } %>
          </div>
  
          <!-- Order Summary -->
          <div class="mt-16 lg:mt-0 lg:col-span-5">
            <div class="bg-white rounded-lg shadow-sm p-6">
              <h2 class="text-lg font-medium text-gray-900">Order Summary</h2>
              <div class="mt-6 space-y-4">
                <div class="flex items-center justify-between">
                  <p class="text-sm text-gray-600">Subtotal</p>
                  <p class="text-sm font-medium text-gray-900">₹<%= cartTotal.toFixed(2) %></p>
                </div>
                <div class="border-t border-gray-200 pt-4">
                  <div class="flex items-center justify-between">
                    <p class="text-base font-medium text-gray-900">Order total</p>
                    <p class="text-base font-medium text-gray-900">₹<%= cartTotal.toFixed(2) %></p>
                  </div>
                </div>
              </div>
  
              <div class="mt-6">
                <a href="/checkout" class="w-full px-6 py-3 bg-indigo-600 text-white rounded-md">Proceed to Checkout</a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>


    <%- include('../partials/footer') %>

    <script>
  async function addToCart(productId, quantity = 1) {
    try {
        const response = await fetch('/cart/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                productId: productId,
                quantity: quantity
            })
        });

        const data = await response.json();

        // Always show an alert based on the response
        if (data.success) {
            // Success message
            const result = await Swal.fire({
                title: 'Success!',
                text: 'Product added to cart successfully',
                icon: 'success',
                showConfirmButton: true,
                confirmButtonText: 'View Cart',
                showCancelButton: true,
                cancelButtonText: 'Continue Shopping',
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#808080'
            });

            // If user clicks "View Cart", redirect to cart page
            if (result.isConfirmed) {
                window.location.href = '/cart';
            }

            // Update stock display if it exists
            const stockElement = document.querySelector(`[data-stock="${productId}"]`);
            if (stockElement && data.remainingStock !== undefined) {
                stockElement.textContent = `In Stock: ${data.remainingStock}`;
            }
        } else {
            // Error message
            await Swal.fire({
                title: 'Oops...',
                text: data.message || 'Failed to add product to cart',
                icon: 'error',
                confirmButtonColor: '#3085d6'
            });
        }
    } catch (error) {
        console.error('Error adding to cart:', error);
        await Swal.fire({
            title: 'Error',
            text: 'An error occurred while adding the product to cart',
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
    }
}

async function updateQuantity(itemId, action) {
    try {
        const quantityElement = document.querySelector(`[data-product-id="${itemId}"]`);
        const currentQuantity = parseInt(quantityElement.textContent);

        if (action === 'decrease' && currentQuantity <= 1) {
            const result = await Swal.fire({
                title: 'Remove Item?',
                text: 'Do you want to remove this item from cart?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, remove it!'
            });

            if (result.isConfirmed) {
                return removeFromCart(itemId);
            }
            return;
        }

        const response = await fetch(`/cart/update/${itemId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                quantity: action === 'increase' ? 1 : -1,
            })
        });

        const data = await response.json();

        if (response.ok) {
            // Update quantity display
            quantityElement.textContent = data.newQuantity;
            
            // Update item total price
            const itemTotalElement = quantityElement.closest('.flex').querySelector('.text-gray-500');
            if (itemTotalElement) {
                itemTotalElement.textContent = `Total: ₹${data.total}`;
            }

            // Update cart total
            const cartTotalElements = document.querySelectorAll('.text-gray-900');
            cartTotalElements.forEach(element => {
                if (element.textContent.includes('₹')) {
                    element.textContent = `₹${data.cartTotal}`;
                }
            });

        } else {
            // Show error with SweetAlert2
            let errorMessage = data.message;
            if (data.message.includes('Maximum quantity limit')) {
                errorMessage = 'You can only add up to 10 items of the same product';
            }

            await Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: errorMessage,
                confirmButtonColor: '#3085d6'
            });

            // Reset quantity display if needed
            if (data.currentQuantity) {
                quantityElement.textContent = data.currentQuantity;
            }
        }
    } catch (error) {
        console.error('Error updating quantity:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while updating the cart',
            confirmButtonColor: '#3085d6'
        });
    }
}
      
async function removeFromCart(itemId) {
    try {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
        });

        if (result.isConfirmed) {
            const response = await fetch(`/cart/remove/${itemId}`, {
                method: 'DELETE',
            });

            const data = await response.json();

            if (response.ok) {
                // Find the item element
                const itemElement = document.querySelector(`[data-product-id="${itemId}"]`);
                
                if (itemElement) {
                    const cartItem = itemElement.closest('.flex.items-center.bg-white');
                    if (cartItem) {
                        cartItem.remove();
                    }
                }

                // Update cart total
                if (data.cartTotal !== undefined) {
                    const cartTotalElements = document.querySelectorAll('.text-base.font-medium.text-gray-900');
                    cartTotalElements.forEach(element => {
                        if (element.textContent.includes('₹')) {
                            element.textContent = `₹${data.cartTotal.toFixed(2)}`;
                        }
                    });
                }

                // Show success message
                await Swal.fire({
                    title: 'Removed!',
                    text: 'Item has been removed from cart.',
                    icon: 'success',
                    confirmButtonColor: '#3085d6'
                });

                // Check if cart is empty
                if (data.isEmpty) {
                    window.location.reload();
                }
            } else {
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to remove item',
                    confirmButtonColor: '#3085d6'
                });
            }
        }
    } catch (error) {
        console.error('Error removing item:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while removing the item',
            confirmButtonColor: '#3085d6'
        });
    }
}
      </script>
</body>
</html>