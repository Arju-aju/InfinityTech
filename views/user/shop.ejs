<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Shop - InfinityTech</title>
    <script defer src="https://cdnjs.cloudflare.com/ajax/libs/alpinejs/3.13.5/cdn.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-50">
    <%- include('../partials/header') %>

    <!-- Main container -->
    <div class="min-h-screen bg-gray-50 flex flex-col items-center">
        <!-- Search and Filter Bar -->
        <div class="container mx-auto px-6 py-4 bg-white shadow-sm w-full">
            <div class="flex flex-wrap items-center gap-4 justify-center">
                <!-- Search Bar -->
                <div class="flex-grow max-w-md">
                    <form action="/shop" method="GET" id="searchForm" class="relative">
                        <input 
                            type="text" 
                            name="search" 
                            value="<%= locals.searchQuery || '' %>"
                            placeholder="Search products..."
                            class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500"
                        >
                        <button type="submit" class="absolute right-2 top-1/2 transform -translate-y-1/2">
                            <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                            </svg>
                        </button>
                    </form>
                </div>

                <!-- Category Dropdown -->
                <div class="relative">
                    <select 
                        class="appearance-none bg-white border rounded-lg px-4 py-2 pr-8 focus:outline-none focus:ring-1 focus:ring-blue-500" 
                        id="categorySelect" 
                        onchange="filterByCategory(this.value)"
                    >
                        <option value="">All Categories</option>
                        <% categories.forEach(category => { %>
                            <option value="<%= category._id %>"><%= category.name %></option>
                        <% }) %>
                    </select>
                    <div class="absolute right-2 top-1/2 transform -translate-y-1/2 pointer-events-none">
                        <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                        </svg>
                    </div>
                </div>

                <!-- Price Range -->
                <div class="text-gray-700">
                    <div class="relative" x-data="{ open: false }">
                        <button 
                            @click="open = !open" 
                            class="bg-white border rounded-lg px-4 py-2 inline-flex items-center focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                            <span>Price Range</span>
                            <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                            </svg>
                        </button>
                        <div 
                            x-show="open" 
                            @click.away="open = false" 
                            class="absolute right-0 mt-2 w-64 bg-white border rounded-lg shadow-lg z-10 p-4"
                        >
                            <div class="space-y-4">
                                <div class="flex space-x-4">
                                    <input 
                                        type="number" 
                                        id="minPrice" 
                                        value="<%= locals.selectedMinPrice || '' %>"
                                        min="<%= locals.minPrice || 0 %>" 
                                        max="<%= locals.maxPrice || 999999 %>"
                                        placeholder="Min"
                                        class="w-1/2 px-2 py-1 border rounded"
                                    >
                                    <input 
                                        type="number" 
                                        id="maxPrice" 
                                        value="<%= locals.selectedMaxPrice || '' %>"
                                        min="<%= locals.minPrice || 0 %>" 
                                        max="<%= locals.maxPrice || 999999 %>"
                                        placeholder="Max"
                                        class="w-1/2 px-2 py-1 border rounded"
                                    >
                                </div>
                                <button 
                                    onclick="applyPriceFilter()"
                                    class="w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                                >
                                    Apply
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Sort Dropdown -->
                <div class="relative">
                    <select 
                        class="appearance-none bg-white border rounded-lg px-4 py-2 pr-8 focus:outline-none focus:ring-1 focus:ring-blue-500" 
                        id="sortSelect" 
                        onchange="filterBySort(this.value)"
                    >
                        <option value="newest">New Arrivals</option>
                        <option value="price_low_to_high">Price: Low to High</option>
                        <option value="price_high_to_low">Price: High to Low</option>
                    </select>
                    <div class="absolute right-2 top-1/2 transform -translate-y-1/2 pointer-events-none">
                        <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                        </svg>
                    </div>
                </div>

                <!-- Reset Filters Button -->
                <button 
                    onclick="resetFilters()" 
                    class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500"
                >
                    Reset Filters
                </button>
            </div>
        </div>

        <!-- Product Grid -->

        <div class="grid grid-cols-4 gap-8">
            <% if (typeof products !== 'undefined' && products.length > 0) { %>
                <% products.forEach(function(product) { %>
                    <div class="bg-white rounded-lg shadow-lg overflow-hidden transition-transform duration-300 hover:scale-105">
                        <div class="relative">
                            <a href="product/<%= product._id %>">
                                <img src="<%= product.images[0] %>" alt="<%= product.name %>" class="w-full h-48 object-cover">
                            </a>
                            <% if (product.discountPercentage > 0) { %>
                                <span class="absolute top-2 left-2 bg-red-500 text-white text-sm px-2 py-1 rounded">
                                    -<%= product.discountPercentage %>%
                                </span>
                            <% } %>
                            <button 
                            class="absolute top-2 right-2 bg-white p-2 rounded-full shadow-md hover:bg-gray-100"
                            onclick="toggleWishlist('<%= product._id %>')"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                            </svg>
                        </button>
                        </div>
                        <div class="p-6">
                            <a href="product/<%= product._id %>">
                                <h3 class="text-lg font-semibold mb-2"><%= product.name %></h3>
                                <div class="flex items-center justify-between mb-3">
                                    <div>
                                        <% if (product.discountPercentage > 0) { %>
                                            <span class="text-gray-500 line-through">₹<%= product.price.toFixed(2) %></span>
                                            <span class="text-xl font-bold text-primary ml-2">₹<%= product.discountedPrice.toFixed(2) %></span>
                                        <% } else { %>
                                            <span class="text-xl font-bold text-primary">₹<%= product.price.toFixed(2) %></span>
                                        <% } %>
                                    </div>
                                    <span class="bg-green-100 text-green-800 text-sm font-semibold px-2.5 py-0.5 rounded">
                                        New
                                    </span>
                                </div>
                            </a>
                            <div class="flex space-x-2 mt-2">
                                <button 
                                    onclick="addToCart('<%= product._id %>')" 
                                    class="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-3 rounded-md text-sm font-medium transition duration-200"
                                >
                                    Add to Cart
                                </button>
                                <button 
                                    onclick="buyNow('<%= product._id %>')" 
                                    class="flex-1 bg-primary hover:bg-primary-dark text-white py-2 px-3 rounded-md text-sm font-medium transition duration-200"
                                >
                                    Buy Now
                                </button>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="col-span-4 text-center text-gray-500">
                    No products available at the moment.
                </div>
            <% } %>
        </div>
        


        <!-- Pagination -->
        <% if (totalPages > 1) { %>
            <div class="container mx-auto mt-8 flex justify-center">
                <nav class="inline-flex rounded-md shadow-sm">
                    <% if (currentPage > 1) { %>
                        <a href="/shop?page=<%= currentPage - 1 %>" 
                           class="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-l-md hover:bg-gray-50">
                            Previous
                        </a>
                    <% } %>
                    
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <a href="/shop?page=<%= i %>" 
                           class="px-3 py-2 text-sm font-medium <%= currentPage === i ? 'bg-blue-600 text-white' : 'bg-white text-gray-700' %> border border-gray-300">
                            <%= i %>
                        </a>
                    <% } %>
                    
                    <% if (currentPage < totalPages) { %>
                        <a href="/shop?page=<%= currentPage + 1 %>" 
                           class="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-r-md hover:bg-gray-50">
                            Next
                        </a>
                    <% } %>
                </nav>
            </div>
        <% } %>
    </div>

    <%- include('../partials/footer') %>
    
    <script>
    // Function to add a product to the cart
    function addToCart(productId) {
        showNotification('Adding to cart...', 'info');
    
        fetch('/api/cart/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                productId: productId,
                quantity: 1
            }),
            credentials: 'same-origin'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            const cartCounter = document.getElementById('cart-counter');
            if (cartCounter && data.totalItems) {
                cartCounter.textContent = data.totalItems;
                cartCounter.classList.remove('hidden');
            }
            showNotification('Product added to cart!', 'success');
        })
        .catch(error => {
            console.error('Error adding to cart:', error);
            showNotification('Failed to add product to cart. Please try again.', 'error');
        });
    }
    
    // Function to buy product now
    function buyNow(productId) {
        showNotification('Processing...', 'info');
    
        fetch('/api/cart/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                productId: productId,
                quantity: 1,
                buyNow: true
            }),
            credentials: 'same-origin'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            window.location.href = '/checkout?source=buy_now';
        })
        .catch(error => {
            console.error('Error processing buy now:', error);
            showNotification('Failed to process. Please try again.', 'error');
        });
    }
    
    // Function to toggle wishlist
    function toggleWishlist(productId) {
    // Since we're not receiving an event object, we can't call preventDefault
    // Instead, we need to find the button that was clicked
    const wishlistBtn = event ? event.currentTarget : document.querySelector(`button[onclick*="${productId}"]`);
    const wishlistIcon = wishlistBtn.querySelector('svg');

    wishlistIcon.classList.toggle('text-red-500');
    wishlistIcon.classList.toggle('text-gray-500');

    const isAdding = wishlistIcon.classList.contains('text-red-500');
    showNotification(isAdding ? 'Adding to wishlist...' : 'Removing from wishlist...', 'info');

    fetch('/api/wishlist/toggle', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productId }),
        credentials: 'same-origin'
    })
    .then(response => {
        if (!response.ok) {
            if (response.status === 401) {
                wishlistIcon.classList.toggle('text-red-500');
                wishlistIcon.classList.toggle('text-gray-500');
                showNotification('Please log in to modify wishlist', 'error');
                return { success: false };
            }
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            showNotification(
                data.added ? 'Product added to wishlist!' : 'Product removed from wishlist',
                'success'
            );
        } else {
            wishlistIcon.classList.toggle('text-red-500');
            wishlistIcon.classList.toggle('text-gray-500');
            showNotification(data.message || 'Error updating wishlist', 'error');
        }
    })
    .catch(error => {
        console.error('Error toggling wishlist:', error);
        wishlistIcon.classList.toggle('text-red-500');
        wishlistIcon.classList.toggle('text-gray-500');
        showNotification('Failed to update wishlist. Please try again.', 'error');
    });
}
    
    // Function to show notifications using SweetAlert2
    function showNotification(message, type = 'info') {
        let bgColor;
    
        switch (type) {
            case 'success':
                bgColor = '#28a745'; // Green
                break;
            case 'error':
                bgColor = '#dc3545'; // Red
                break;
            case 'info':
                bgColor = '#007bff'; // Blue
                break;
            case 'warning':
                bgColor = '#ffc107'; // Yellow
                break;
            default:
                bgColor = '#6c757d'; // Gray (fallback)
        }
    
        Swal.fire({
            text: message,
            icon: type, // Matches Swal's built-in icons (success, error, warning, info)
            toast: true,
            position: 'bottom-end',
            timer: 3000,
            timerProgressBar: true,
            showConfirmButton: false,
            background: bgColor,
            color: '#fff', // Ensures text is visible on all backgrounds
        });
    }
    
    // Initialize functionality when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(() => {
            showNotification('Notification system initialized', 'info');
        }, 1000);
    
        document.querySelectorAll('.wishlist-btn').forEach(button => {
            button.addEventListener('click', function(event) {
                const productId = this.getAttribute('data-product-id');
                if (productId) {
                    toggleWishlist(event, productId);
                }
            });
        });
    
        document.querySelectorAll('.add-to-cart-btn').forEach(button => {
            button.addEventListener('click', function() {
                const productId = this.getAttribute('data-product-id');
                if (productId) {
                    addToCart(productId);
                }
            });
        });
    
        document.querySelectorAll('.buy-now-btn').forEach(button => {
            button.addEventListener('click', function() {
                const productId = this.getAttribute('data-product-id');
                if (productId) {
                    buyNow(productId);
                }
            });
        });
    
        fetch('/api/user/wishlist/products')
            .then(response => {
                if (!response.ok) {
                    if (response.status === 401) {
                        return null;
                    }
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data && data.wishlistItems) {
                    data.wishlistItems.forEach(itemId => {
                        const wishlistBtns = document.querySelectorAll(`[data-product-id="${itemId}"]`);
                        wishlistBtns.forEach(btn => {
                            if (btn.classList.contains('wishlist-btn')) {
                                const wishlistIcon = btn.querySelector('svg');
                                if (wishlistIcon) {
                                    wishlistIcon.classList.remove('text-gray-500');
                                    wishlistIcon.classList.add('text-red-500');
                                }
                            }
                        });
                    });
                }
            })
            .catch(error => {
                console.error('Error fetching wishlist data:', error);
            });
    });
    
   
</script>