<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verify OTP - InfinityTech</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Gradient Animation */
        @keyframes gradientFlow {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        .animate-gradient {
            background-size: 200% 200%;
            animation: gradientFlow 8s ease infinite;
        }

        /* Input Focus Animation */
        .input-focus {
            transition: all 0.3s ease;
        }
        .input-focus:focus {
            box-shadow: 0 0 15px rgba(40, 69, 174, 0.6);
            transform: scale(1.02);
            border-color: #A517BA;
        }

        /* Button Hover Animation */
        .btn-hover {
            transition: all 0.4s ease;
        }
        .btn-hover:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(40, 69, 174, 0.5);
        }

        /* Subtle Glow Effect */
        .glow-effect {
            box-shadow: 0 0 20px rgba(165, 23, 186, 0.2);
        }
    </style>
</head>
<body class="bg-gray-900 min-h-screen overflow-hidden font-sans">
    <!-- Animated Background -->
    <div class="fixed inset-0 overflow-hidden">
        <div class="absolute inset-0 bg-gradient-to-tr from-[#1F2A77] via-[#5D2E8C] to-[#A517BA] animate-gradient opacity-40"></div>
        <div class="absolute inset-0 opacity-10">
            <div class="w-full h-full bg-[radial-gradient(circle_at_center,#ffffff30_1px,transparent_1px)] bg-[length:40px_40px]"></div>
        </div>
        <div class="absolute inset-0 bg-[linear-gradient(45deg,rgba(255,255,255,0.05)_0%,rgba(255,255,255,0)_100%)]"></div>
    </div>

    <!-- Main Container -->
    <div class="min-h-screen flex items-center justify-center relative z-10">
        <div class="max-w-md w-full space-y-8 bg-gray-800/70 backdrop-blur-xl p-10 rounded-3xl shadow-2xl border border-gray-700/20 glow-effect">
            <!-- Header Section -->
            <div class="relative text-center">
                <div class="absolute -top-6 -left-6 w-20 h-20 bg-gradient-to-br from-[#2845AE] to-[#A517BA] rounded-full blur-3xl opacity-40 animate-pulse"></div>
                <h2 class="text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-[#2845AE] to-[#A517BA] animate-gradient">
                    Verify Your Email
                </h2>
                <p class="mt-3 text-base text-gray-300 tracking-wide">
                    We’ve sent a code to <span class="font-semibold text-[#A517BA]"><%= email %></span>
                </p>
            </div>

            <!-- Flash Messages -->
            <% if (messages.error && messages.error.length > 0) { %>
                <div class="text-center text-sm p-4 rounded-xl bg-red-900/80 text-white shadow-lg border border-red-700/50 animate-pulse">
                    <i class="fas fa-exclamation-circle mr-2"></i><%= messages.error[0] %>
                </div>
            <% } else if (messages.success && messages.success.length > 0) { %>
                <div class="text-center text-sm p-4 rounded-xl bg-green-900/80 text-white shadow-lg border border-green-700/50">
                    <i class="fas fa-check-circle mr-2"></i><%= messages.success[0] %>
                </div>
            <% } %>

            <!-- OTP Form -->
            <form id="otpForm" class="space-y-8">
                <div class="relative group">
                    <label for="otp" class="block text-sm font-medium text-gray-200 transition-all duration-300 group-hover:text-[#A517BA]">Enter OTP</label>
                    <div class="mt-2 relative">
                        <input type="text" 
                               id="otp" 
                               name="otp" 
                               class="input-focus appearance-none block w-full px-5 py-3 bg-gray-900/50 border border-gray-700 text-white rounded-xl placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-[#2845AE] hover:border-[#A517BA] transition-all duration-300 text-center tracking-wider" 
                               placeholder="••••••" 
                               maxlength="6" 
                               >
                        <p id="otpError" class="hidden text-red-400 text-xs mt-2 text-center"></p>
                    </div>
                </div>

                <div class="text-center text-sm">
                    <p class="text-gray-400 tracking-wide">Time remaining: <span id="timer" class="font-semibold text-[#A517BA]">01:00</span></p>
                </div>

                <div>
                    <button type="submit" 
                            class="btn-hover w-full flex justify-center py-4 px-6 border border-transparent text-base font-semibold rounded-xl text-white bg-gradient-to-r from-[#2845AE] to-[#A517BA] hover:from-[#1F2A77] hover:to-[#8A139E] focus:outline-none focus:ring-4 focus:ring-[#2845AE]/50 relative overflow-hidden transition-all duration-300">
                        <span class="absolute inset-0 bg-gradient-to-r from-[#2845AE]/30 to-[#A517BA]/30 animate-gradient"></span>
                        <span class="relative flex items-center">
                            <i class="fas fa-check mr-3"></i>
                            Verify OTP
                        </span>
                    </button>
                </div>

                <div class="text-center">
                    <button type="button" 
                            id="resendButton" 
                            disabled 
                            class="text-sm font-semibold text-[#2845AE] hover:text-[#A517BA] disabled:text-gray-500 disabled:cursor-not-allowed transition-colors duration-300">
                        Resend OTP
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Client-Side Script -->
    <script>
        let timeLeft = 60;
        let timerId = null;

        function startTimer() {
            const timerDisplay = document.getElementById('timer');
            const resendButton = document.getElementById('resendButton');
            
            resendButton.disabled = true;

            timerId = setInterval(() => {
                timeLeft--;
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

                if (timeLeft <= 0) {
                    clearInterval(timerId);
                    resendButton.disabled = false;
                    timerDisplay.textContent = "00:00";
                }
            }, 1000);
        }

        startTimer();

        document.getElementById('otpForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const otp = document.getElementById('otp').value.trim();
            const otpError = document.getElementById('otpError');

            otpError.classList.add('hidden');

            if (!otp || !/^\d{6}$/.test(otp)) {
                otpError.textContent = 'Please enter a valid 6-digit OTP';
                otpError.classList.remove('hidden');
                return;
            }

            this.submit(); // Submit the form if validation passes
        });

        document.getElementById('resendButton').addEventListener('click', function() {
            fetch('/resendOtp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    timeLeft = 60;
                    clearInterval(timerId);
                    startTimer();
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message,
                        timer: 1500,
                        showConfirmButton: false
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An unexpected error occurred'
                });
            });
        });
    </script>
</body>
</html>